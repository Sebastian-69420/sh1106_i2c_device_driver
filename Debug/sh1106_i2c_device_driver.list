
sh1106_i2c_device_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003310  08003310  00004310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003340  08003340  00005038  2**0
                  CONTENTS
  4 .ARM          00000000  08003340  08003340  00005038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003340  08003340  00005038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003340  08003340  00004340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003344  08003344  00004344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08003348  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  20000038  08003380  00005038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  08003380  000054f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079a8  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acd  00000000  00000000  0000ca08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  0000e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ec  00000000  00000000  0000ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e5b5  00000000  00000000  0000f284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a84b  00000000  00000000  0001d839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005989d  00000000  00000000  00028084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00081921  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a90  00000000  00000000  00081964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000833f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032f8 	.word	0x080032f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	080032f8 	.word	0x080032f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fc3c 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82c 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8e0 	bl	80003f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8c0 	bl	80003b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000234:	f000 f87e 	bl	8000334 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

/* USER CODE BEGIN 2 */
  SH1106_Init(&hi2c1, SH1106_DEV_ADDRESS);
 8000238:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <main+0x60>)
 800023a:	2178      	movs	r1, #120	@ 0x78
 800023c:	0018      	movs	r0, r3
 800023e:	f000 f915 	bl	800046c <SH1106_Init>
  SH1106_Display_Clear();
 8000242:	f000 f953 	bl	80004ec <SH1106_Display_Clear>
  SH1106_Display_On();
 8000246:	f000 f93d 	bl	80004c4 <SH1106_Display_On>

  SH1106_Draw_Line(0, 0, 127, 63);
 800024a:	233f      	movs	r3, #63	@ 0x3f
 800024c:	227f      	movs	r2, #127	@ 0x7f
 800024e:	2100      	movs	r1, #0
 8000250:	2000      	movs	r0, #0
 8000252:	f000 fa3d 	bl	80006d0 <SH1106_Draw_Line>
  SH1106_Draw_Line(23, 15, 96, 18);
 8000256:	2312      	movs	r3, #18
 8000258:	2260      	movs	r2, #96	@ 0x60
 800025a:	210f      	movs	r1, #15
 800025c:	2017      	movs	r0, #23
 800025e:	f000 fa37 	bl	80006d0 <SH1106_Draw_Line>
  SH1106_Draw_Line(0, 55, 85, 38);
 8000262:	2326      	movs	r3, #38	@ 0x26
 8000264:	2255      	movs	r2, #85	@ 0x55
 8000266:	2137      	movs	r1, #55	@ 0x37
 8000268:	2000      	movs	r0, #0
 800026a:	f000 fa31 	bl	80006d0 <SH1106_Draw_Line>
  SH1106_Draw_Line(68, 3, 22, 52);
 800026e:	2334      	movs	r3, #52	@ 0x34
 8000270:	2216      	movs	r2, #22
 8000272:	2103      	movs	r1, #3
 8000274:	2044      	movs	r0, #68	@ 0x44
 8000276:	f000 fa2b 	bl	80006d0 <SH1106_Draw_Line>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	e7fd      	b.n	800027a <main+0x5a>
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	20000054 	.word	0x20000054

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b095      	sub	sp, #84	@ 0x54
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2420      	movs	r4, #32
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2330      	movs	r3, #48	@ 0x30
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 fff9 	bl	800328c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	2310      	movs	r3, #16
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fff1 	bl	800328c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	2310      	movs	r3, #16
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 ffea 	bl	800328c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2210      	movs	r2, #16
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 facd 	bl	8002874 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002de:	f000 f89f 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	2110      	movs	r1, #16
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	2207      	movs	r2, #7
 80002e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2200      	movs	r2, #0
 80002ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f002 fdd1 	bl	8002ea8 <HAL_RCC_ClockConfig>
 8000306:	1e03      	subs	r3, r0, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800030a:	f000 f889 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800030e:	003b      	movs	r3, r7
 8000310:	2220      	movs	r2, #32
 8000312:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000314:	003b      	movs	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800031a:	003b      	movs	r3, r7
 800031c:	0018      	movs	r0, r3
 800031e:	f002 fee7 	bl	80030f0 <HAL_RCCEx_PeriphCLKConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000326:	f000 f87b 	bl	8000420 <Error_Handler>
  }
}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	46bd      	mov	sp, r7
 800032e:	b015      	add	sp, #84	@ 0x54
 8000330:	bd90      	pop	{r4, r7, pc}
	...

08000334 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	@ (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800033e:	4b1a      	ldr	r3, [pc, #104]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	@ (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	0018      	movs	r0, r3
 8000372:	f000 ff9f 	bl	80012b4 <HAL_I2C_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f851 	bl	8000420 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000380:	2100      	movs	r1, #0
 8000382:	0018      	movs	r0, r3
 8000384:	f002 f9de 	bl	8002744 <HAL_I2CEx_ConfigAnalogFilter>
 8000388:	1e03      	subs	r3, r0, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f848 	bl	8000420 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <MX_I2C1_Init+0x74>)
 8000392:	2100      	movs	r1, #0
 8000394:	0018      	movs	r0, r3
 8000396:	f002 fa21 	bl	80027dc <HAL_I2CEx_ConfigDigitalFilter>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f83f 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000054 	.word	0x20000054
 80003ac:	40005400 	.word	0x40005400
 80003b0:	00201d2b 	.word	0x00201d2b

080003b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <MX_DMA_Init+0x38>)
 80003bc:	695a      	ldr	r2, [r3, #20]
 80003be:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <MX_DMA_Init+0x38>)
 80003c0:	2101      	movs	r1, #1
 80003c2:	430a      	orrs	r2, r1
 80003c4:	615a      	str	r2, [r3, #20]
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <MX_DMA_Init+0x38>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	2201      	movs	r2, #1
 80003cc:	4013      	ands	r3, r2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2100      	movs	r1, #0
 80003d6:	200a      	movs	r0, #10
 80003d8:	f000 fc72 	bl	8000cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80003dc:	200a      	movs	r0, #10
 80003de:	f000 fc84 	bl	8000cea <HAL_NVIC_EnableIRQ>

}
 80003e2:	46c0      	nop			@ (mov r8, r8)
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	46c0      	nop			@ (mov r8, r8)
 80003ec:	40021000 	.word	0x40021000

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_GPIO_Init+0x2c>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <MX_GPIO_Init+0x2c>)
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	02c9      	lsls	r1, r1, #11
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <MX_GPIO_Init+0x2c>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	02db      	lsls	r3, r3, #11
 800040c:	4013      	ands	r3, r2
 800040e:	607b      	str	r3, [r7, #4]
 8000410:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1) {
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	e7fd      	b.n	8000428 <Error_Handler+0x8>

0800042c <SH1106_CALL_HAL_I2C_Transmit>:
  * @brief This function replaces the HAL_I2C function for easier handling of the i2c pointer and the device address.
  * @param *pData:        pointer to byte array
  * @param size:          size of pData
  * Qparam timeout:       timeout in ms
  */
void SH1106_CALL_HAL_I2C_Transmit(uint8_t *pData, uint16_t size, uint32_t timeout) {
 800042c:	b5b0      	push	{r4, r5, r7, lr}
 800042e:	b086      	sub	sp, #24
 8000430:	af02      	add	r7, sp, #8
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	607a      	str	r2, [r7, #4]
 8000436:	250a      	movs	r5, #10
 8000438:	197b      	adds	r3, r7, r5
 800043a:	1c0a      	adds	r2, r1, #0
 800043c:	801a      	strh	r2, [r3, #0]
  HAL_I2C_Master_Transmit(HI2C, DEVICE_ADDRESS, pData, size, timeout);
 800043e:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <SH1106_CALL_HAL_I2C_Transmit+0x38>)
 8000440:	6818      	ldr	r0, [r3, #0]
 8000442:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <SH1106_CALL_HAL_I2C_Transmit+0x3c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	001c      	movs	r4, r3
 8000448:	197b      	adds	r3, r7, r5
 800044a:	8819      	ldrh	r1, [r3, #0]
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	000b      	movs	r3, r1
 8000454:	0021      	movs	r1, r4
 8000456:	f000 ffd3 	bl	8001400 <HAL_I2C_Master_Transmit>
}
 800045a:	46c0      	nop			@ (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bdb0      	pop	{r4, r5, r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	200000ec 	.word	0x200000ec
 8000468:	200000f0 	.word	0x200000f0

0800046c <SH1106_Init>:
/**
  * @brief This function initializes the display.
  * @param *hi2c:         i2c-handle pointer
  * @param deviceAddress: i2c device address
  */
void SH1106_Init(I2C_HandleTypeDef *hi2c, uint8_t deviceAddress) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	000a      	movs	r2, r1
 8000476:	1cfb      	adds	r3, r7, #3
 8000478:	701a      	strb	r2, [r3, #0]
  HI2C = hi2c;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <SH1106_Init+0x48>)
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
  DEVICE_ADDRESS = deviceAddress;
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <SH1106_Init+0x4c>)
 8000482:	1cfa      	adds	r2, r7, #3
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	701a      	strb	r2, [r3, #0]
  memset(screenBuffer, 0, sizeof(screenBuffer));
 8000488:	2380      	movs	r3, #128	@ 0x80
 800048a:	00da      	lsls	r2, r3, #3
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <SH1106_Init+0x50>)
 800048e:	2100      	movs	r1, #0
 8000490:	0018      	movs	r0, r3
 8000492:	f002 fefb 	bl	800328c <memset>
  size_t totalBytesToTransmit = sizeof(dynamicInitDataArray) / sizeof(dynamicInitDataArray[0]);
 8000496:	2329      	movs	r3, #41	@ 0x29
 8000498:	60fb      	str	r3, [r7, #12]
  SH1106_CALL_HAL_I2C_Transmit(dynamicInitDataArray, totalBytesToTransmit, 1000);
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	b299      	uxth	r1, r3
 800049e:	23fa      	movs	r3, #250	@ 0xfa
 80004a0:	009a      	lsls	r2, r3, #2
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <SH1106_Init+0x54>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f7ff ffc1 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	200000ec 	.word	0x200000ec
 80004b8:	200000f0 	.word	0x200000f0
 80004bc:	200000f4 	.word	0x200000f4
 80004c0:	20000000 	.word	0x20000000

080004c4 <SH1106_Display_On>:

/**
  * @brief This function turns the display on and displays the RAM content.
  */
void SH1106_Display_On(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  uint8_t data[4] = {
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	4a06      	ldr	r2, [pc, #24]	@ (80004e8 <SH1106_Display_On+0x24>)
 80004ce:	601a      	str	r2, [r3, #0]
    SH1106_COMMAND_FLAG, DISPLAY_ON_RAM_CONTENT,
    SH1106_COMMAND_FLAG, DISPLAY_ON_NORMAL_MODE
  };
  SH1106_CALL_HAL_I2C_Transmit(data, 4, 1000);
 80004d0:	23fa      	movs	r3, #250	@ 0xfa
 80004d2:	009a      	lsls	r2, r3, #2
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2104      	movs	r1, #4
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff ffa7 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	af00a400 	.word	0xaf00a400

080004ec <SH1106_Display_Clear>:
}

/**
  * @brief This function clears the display ram to all zeros.
  */
void SH1106_Display_Clear(void) {
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b0a3      	sub	sp, #140	@ 0x8c
 80004f0:	af00      	add	r7, sp, #0
  uint8_t pixelOff[SH1106_WIDTH + 1];
  pixelOff[0] = SH1106_DATA_FLAG;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2240      	movs	r2, #64	@ 0x40
 80004f6:	701a      	strb	r2, [r3, #0]
  memset(&pixelOff[1], 0x00, SH1106_WIDTH);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	3301      	adds	r3, #1
 80004fc:	2280      	movs	r2, #128	@ 0x80
 80004fe:	2100      	movs	r1, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f002 fec3 	bl	800328c <memset>
  for(uint8_t page = 0; page < 8; page++){
 8000506:	2387      	movs	r3, #135	@ 0x87
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
 800050e:	e012      	b.n	8000536 <SH1106_Display_Clear+0x4a>
    SH1106_Set_Page_And_Column_Address(page, 0);
 8000510:	2487      	movs	r4, #135	@ 0x87
 8000512:	193b      	adds	r3, r7, r4
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2100      	movs	r1, #0
 8000518:	0018      	movs	r0, r3
 800051a:	f000 f87f 	bl	800061c <SH1106_Set_Page_And_Column_Address>
    SH1106_CALL_HAL_I2C_Transmit(pixelOff, sizeof(pixelOff), 1000);
 800051e:	23fa      	movs	r3, #250	@ 0xfa
 8000520:	009a      	lsls	r2, r3, #2
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2181      	movs	r1, #129	@ 0x81
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff ff80 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
  for(uint8_t page = 0; page < 8; page++){
 800052c:	193b      	adds	r3, r7, r4
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	193b      	adds	r3, r7, r4
 8000532:	3201      	adds	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	2387      	movs	r3, #135	@ 0x87
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b07      	cmp	r3, #7
 800053e:	d9e7      	bls.n	8000510 <SH1106_Display_Clear+0x24>
  }
}
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	46c0      	nop			@ (mov r8, r8)
 8000544:	46bd      	mov	sp, r7
 8000546:	b023      	add	sp, #140	@ 0x8c
 8000548:	bd90      	pop	{r4, r7, pc}
	...

0800054c <SH1106_Set_Page_Address>:

/**
  * @brief This function sets the page.
  * @param page:          page number from 0-7
  */
void SH1106_Set_Page_Address(uint8_t page) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	0002      	movs	r2, r0
 8000554:	1dfb      	adds	r3, r7, #7
 8000556:	701a      	strb	r2, [r3, #0]
  POS_Y = page;
 8000558:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <SH1106_Set_Page_Address+0x48>)
 800055a:	1dfa      	adds	r2, r7, #7
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	701a      	strb	r2, [r3, #0]
  if(page > 7) {
 8000560:	1dfb      	adds	r3, r7, #7
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b07      	cmp	r3, #7
 8000566:	d811      	bhi.n	800058c <SH1106_Set_Page_Address+0x40>
    return; // Check if page is in bounds.
  }
  uint8_t setPageAddress[2] = {SH1106_COMMAND_FLAG, SET_PAGE_ADDRESS_FOR_PAGE_ADDRESSING_MODE + page};
 8000568:	210c      	movs	r1, #12
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3b50      	subs	r3, #80	@ 0x50
 8000576:	b2da      	uxtb	r2, r3
 8000578:	187b      	adds	r3, r7, r1
 800057a:	705a      	strb	r2, [r3, #1]
  SH1106_CALL_HAL_I2C_Transmit(setPageAddress, 2, 1000);
 800057c:	23fa      	movs	r3, #250	@ 0xfa
 800057e:	009a      	lsls	r2, r3, #2
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2102      	movs	r1, #2
 8000584:	0018      	movs	r0, r3
 8000586:	f7ff ff51 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
 800058a:	e000      	b.n	800058e <SH1106_Set_Page_Address+0x42>
    return; // Check if page is in bounds.
 800058c:	46c0      	nop			@ (mov r8, r8)
}
 800058e:	46bd      	mov	sp, r7
 8000590:	b004      	add	sp, #16
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000f2 	.word	0x200000f2

08000598 <SH1106_Set_Column_Address>:

/**
  * @brief This function sets the column.
  * @param column:        lower-column number from 0-131
  */
void SH1106_Set_Column_Address(uint8_t column) {
 8000598:	b5b0      	push	{r4, r5, r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	0002      	movs	r2, r0
 80005a0:	1dfb      	adds	r3, r7, #7
 80005a2:	701a      	strb	r2, [r3, #0]
  POS_X = column;
 80005a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <SH1106_Set_Column_Address+0x80>)
 80005a6:	1dfa      	adds	r2, r7, #7
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
  column = column + 2; // Add 2 to account for bytes in ram without pixels.
 80005ac:	1dfb      	adds	r3, r7, #7
 80005ae:	1dfa      	adds	r2, r7, #7
 80005b0:	7812      	ldrb	r2, [r2, #0]
 80005b2:	3202      	adds	r2, #2
 80005b4:	701a      	strb	r2, [r3, #0]
  uint8_t lowerNibble  = column & 0x0F; // Mask the lower nibble
 80005b6:	200f      	movs	r0, #15
 80005b8:	183b      	adds	r3, r7, r0
 80005ba:	1dfa      	adds	r2, r7, #7
 80005bc:	7812      	ldrb	r2, [r2, #0]
 80005be:	210f      	movs	r1, #15
 80005c0:	400a      	ands	r2, r1
 80005c2:	701a      	strb	r2, [r3, #0]
  uint8_t higherNibble = (column >> 4) & 0x0F; // Shift and mask the higher nibble
 80005c4:	250e      	movs	r5, #14
 80005c6:	197b      	adds	r3, r7, r5
 80005c8:	1dfa      	adds	r2, r7, #7
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	0912      	lsrs	r2, r2, #4
 80005ce:	701a      	strb	r2, [r3, #0]
  uint8_t setColumnLowerAddress[2]  = {SH1106_COMMAND_FLAG, 0x00 + lowerNibble};
 80005d0:	210c      	movs	r1, #12
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	183a      	adds	r2, r7, r0
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	705a      	strb	r2, [r3, #1]
  uint8_t setColumnHigherAddress[2] = {SH1106_COMMAND_FLAG, 0x10 + higherNibble};
 80005e0:	2408      	movs	r4, #8
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	2200      	movs	r2, #0
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	197b      	adds	r3, r7, r5
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	3310      	adds	r3, #16
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	705a      	strb	r2, [r3, #1]
  SH1106_CALL_HAL_I2C_Transmit(setColumnLowerAddress, 2, 1000);
 80005f4:	23fa      	movs	r3, #250	@ 0xfa
 80005f6:	009a      	lsls	r2, r3, #2
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2102      	movs	r1, #2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff15 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
  SH1106_CALL_HAL_I2C_Transmit(setColumnHigherAddress, 2, 1000);
 8000602:	23fa      	movs	r3, #250	@ 0xfa
 8000604:	009a      	lsls	r2, r3, #2
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2102      	movs	r1, #2
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff0e 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b004      	add	sp, #16
 8000616:	bdb0      	pop	{r4, r5, r7, pc}
 8000618:	200000f1 	.word	0x200000f1

0800061c <SH1106_Set_Page_And_Column_Address>:
/**
  * @brief This function sets the page and the column address.
  * @param page:          page number from 0-7
  * @param column:        lower-column number from 0-131
  */
void SH1106_Set_Page_And_Column_Address(uint8_t page, uint8_t column) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	0002      	movs	r2, r0
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	1c0a      	adds	r2, r1, #0
 800062c:	701a      	strb	r2, [r3, #0]
  POS_Y = page;
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <SH1106_Set_Page_And_Column_Address+0x40>)
 8000630:	1dfa      	adds	r2, r7, #7
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	701a      	strb	r2, [r3, #0]
  POS_X = column;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <SH1106_Set_Page_And_Column_Address+0x44>)
 8000638:	1dba      	adds	r2, r7, #6
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	701a      	strb	r2, [r3, #0]
  SH1106_Set_Page_Address(page);
 800063e:	1dfb      	adds	r3, r7, #7
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff ff82 	bl	800054c <SH1106_Set_Page_Address>
  SH1106_Set_Column_Address(column);
 8000648:	1dbb      	adds	r3, r7, #6
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff ffa3 	bl	8000598 <SH1106_Set_Column_Address>
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b002      	add	sp, #8
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	200000f2 	.word	0x200000f2
 8000660:	200000f1 	.word	0x200000f1

08000664 <SH1106_Transmit_Buffer>:
}

/**
  * @brief This function sends the screenBuffer to the display.
  */
void SH1106_Transmit_Buffer(void) {
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b0a3      	sub	sp, #140	@ 0x8c
 8000668:	af00      	add	r7, sp, #0
  uint8_t transmitBuffer[SH1106_WIDTH + 1];
  transmitBuffer[0] = SH1106_DATA_FLAG;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2240      	movs	r2, #64	@ 0x40
 800066e:	701a      	strb	r2, [r3, #0]
  for(uint8_t page = 0; page < 8; page++){
 8000670:	2387      	movs	r3, #135	@ 0x87
 8000672:	18fb      	adds	r3, r7, r3
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
 8000678:	e01d      	b.n	80006b6 <SH1106_Transmit_Buffer+0x52>
    memcpy(&transmitBuffer[1], &screenBuffer[page][0], SH1106_WIDTH);
 800067a:	2487      	movs	r4, #135	@ 0x87
 800067c:	193b      	adds	r3, r7, r4
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	01da      	lsls	r2, r3, #7
 8000682:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SH1106_Transmit_Buffer+0x68>)
 8000684:	18d1      	adds	r1, r2, r3
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fe29 	bl	80032e4 <memcpy>
    SH1106_Set_Page_And_Column_Address(page, 0);
 8000692:	193b      	adds	r3, r7, r4
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2100      	movs	r1, #0
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ffbf 	bl	800061c <SH1106_Set_Page_And_Column_Address>
    SH1106_CALL_HAL_I2C_Transmit(transmitBuffer, sizeof(transmitBuffer), 1000);
 800069e:	23fa      	movs	r3, #250	@ 0xfa
 80006a0:	009a      	lsls	r2, r3, #2
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2181      	movs	r1, #129	@ 0x81
 80006a6:	0018      	movs	r0, r3
 80006a8:	f7ff fec0 	bl	800042c <SH1106_CALL_HAL_I2C_Transmit>
  for(uint8_t page = 0; page < 8; page++){
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	3201      	adds	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
 80006b6:	2387      	movs	r3, #135	@ 0x87
 80006b8:	18fb      	adds	r3, r7, r3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d9dc      	bls.n	800067a <SH1106_Transmit_Buffer+0x16>
  }
}
 80006c0:	46c0      	nop			@ (mov r8, r8)
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b023      	add	sp, #140	@ 0x8c
 80006c8:	bd90      	pop	{r4, r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	200000f4 	.word	0x200000f4

080006d0 <SH1106_Draw_Line>:
  * @param xA: xA-position (0-127)
  * @param yA: yA-position (0-63)
  * @param xB: xB-position (0-127)
  * @param yB: yB-position (0-63)
  */
void SH1106_Draw_Line(uint8_t startX, uint8_t startY, uint8_t endX, uint8_t endY) {
 80006d0:	b5b0      	push	{r4, r5, r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0005      	movs	r5, r0
 80006d8:	000c      	movs	r4, r1
 80006da:	0010      	movs	r0, r2
 80006dc:	0019      	movs	r1, r3
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	1c2a      	adds	r2, r5, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	1c22      	adds	r2, r4, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	1d7b      	adds	r3, r7, #5
 80006ec:	1c02      	adds	r2, r0, #0
 80006ee:	701a      	strb	r2, [r3, #0]
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	1c0a      	adds	r2, r1, #0
 80006f4:	701a      	strb	r2, [r3, #0]
  if(startX >= SH1106_WIDTH || endX >= SH1106_WIDTH || startY >= SH1106_HEIGHT || endY >= SH1106_HEIGHT) {
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b25b      	sxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	da00      	bge.n	8000702 <SH1106_Draw_Line+0x32>
 8000700:	e0b6      	b.n	8000870 <SH1106_Draw_Line+0x1a0>
 8000702:	1d7b      	adds	r3, r7, #5
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <SH1106_Draw_Line+0x3e>
 800070c:	e0b0      	b.n	8000870 <SH1106_Draw_Line+0x1a0>
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b3f      	cmp	r3, #63	@ 0x3f
 8000714:	d900      	bls.n	8000718 <SH1106_Draw_Line+0x48>
 8000716:	e0ab      	b.n	8000870 <SH1106_Draw_Line+0x1a0>
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b3f      	cmp	r3, #63	@ 0x3f
 800071e:	d900      	bls.n	8000722 <SH1106_Draw_Line+0x52>
 8000720:	e0a6      	b.n	8000870 <SH1106_Draw_Line+0x1a0>
    return;
  }

  int16_t deltaX = abs(endX - startX);
 8000722:	1d7b      	adds	r3, r7, #5
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	17d9      	asrs	r1, r3, #31
 800072e:	185a      	adds	r2, r3, r1
 8000730:	404a      	eors	r2, r1
 8000732:	2314      	movs	r3, #20
 8000734:	18fb      	adds	r3, r7, r3
 8000736:	801a      	strh	r2, [r3, #0]
  int16_t deltaY = abs(endY - startY);
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	17d9      	asrs	r1, r3, #31
 8000744:	185a      	adds	r2, r3, r1
 8000746:	404a      	eors	r2, r1
 8000748:	2312      	movs	r3, #18
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	801a      	strh	r2, [r3, #0]
  int16_t stepX = (startX < endX) ? 1 : -1;
 800074e:	1dfa      	adds	r2, r7, #7
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	7812      	ldrb	r2, [r2, #0]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d201      	bcs.n	800075e <SH1106_Draw_Line+0x8e>
 800075a:	2201      	movs	r2, #1
 800075c:	e001      	b.n	8000762 <SH1106_Draw_Line+0x92>
 800075e:	2301      	movs	r3, #1
 8000760:	425a      	negs	r2, r3
 8000762:	2310      	movs	r3, #16
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	801a      	strh	r2, [r3, #0]
  int16_t stepY = (startY < endY) ? 1 : -1;
 8000768:	1dba      	adds	r2, r7, #6
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	7812      	ldrb	r2, [r2, #0]
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d201      	bcs.n	8000778 <SH1106_Draw_Line+0xa8>
 8000774:	2201      	movs	r2, #1
 8000776:	e001      	b.n	800077c <SH1106_Draw_Line+0xac>
 8000778:	2301      	movs	r3, #1
 800077a:	425a      	negs	r2, r3
 800077c:	230e      	movs	r3, #14
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	801a      	strh	r2, [r3, #0]
  int16_t error = deltaX - deltaY;
 8000782:	2314      	movs	r3, #20
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	2312      	movs	r3, #18
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29a      	uxth	r2, r3
 8000792:	2316      	movs	r3, #22
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	801a      	strh	r2, [r3, #0]

  while(1) {
    // Set pixel at (xA, xY)
    uint8_t page = startY / 8;
 8000798:	210d      	movs	r1, #13
 800079a:	187b      	adds	r3, r7, r1
 800079c:	1dba      	adds	r2, r7, #6
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	08d2      	lsrs	r2, r2, #3
 80007a2:	701a      	strb	r2, [r3, #0]
    uint8_t bit = (1 << (startY % 8));
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2207      	movs	r2, #7
 80007aa:	4013      	ands	r3, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	409a      	lsls	r2, r3
 80007b0:	250c      	movs	r5, #12
 80007b2:	197b      	adds	r3, r7, r5
 80007b4:	701a      	strb	r2, [r3, #0]
    screenBuffer[page][startX] |= bit;
 80007b6:	000c      	movs	r4, r1
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	781a      	ldrb	r2, [r3, #0]
 80007bc:	1dfb      	adds	r3, r7, #7
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	492d      	ldr	r1, [pc, #180]	@ (8000878 <SH1106_Draw_Line+0x1a8>)
 80007c2:	01d2      	lsls	r2, r2, #7
 80007c4:	188a      	adds	r2, r1, r2
 80007c6:	5cd0      	ldrb	r0, [r2, r3]
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	781a      	ldrb	r2, [r3, #0]
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	1979      	adds	r1, r7, r5
 80007d2:	7809      	ldrb	r1, [r1, #0]
 80007d4:	4301      	orrs	r1, r0
 80007d6:	b2c8      	uxtb	r0, r1
 80007d8:	4927      	ldr	r1, [pc, #156]	@ (8000878 <SH1106_Draw_Line+0x1a8>)
 80007da:	01d2      	lsls	r2, r2, #7
 80007dc:	188a      	adds	r2, r1, r2
 80007de:	1c01      	adds	r1, r0, #0
 80007e0:	54d1      	strb	r1, [r2, r3]

    // Break when reaching endpoint
    if(startX == endX && startY == endY) {
 80007e2:	1dfa      	adds	r2, r7, #7
 80007e4:	1d7b      	adds	r3, r7, #5
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d105      	bne.n	80007fa <SH1106_Draw_Line+0x12a>
 80007ee:	1dba      	adds	r2, r7, #6
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d036      	beq.n	8000868 <SH1106_Draw_Line+0x198>
      break;
    }
    int16_t doubleError = 2 * error;
 80007fa:	2116      	movs	r1, #22
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	18db      	adds	r3, r3, r3
 8000802:	b29a      	uxth	r2, r3
 8000804:	200a      	movs	r0, #10
 8000806:	183b      	adds	r3, r7, r0
 8000808:	801a      	strh	r2, [r3, #0]
    if(doubleError > deltaY) {
 800080a:	183a      	adds	r2, r7, r0
 800080c:	2012      	movs	r0, #18
 800080e:	183b      	adds	r3, r7, r0
 8000810:	2400      	movs	r4, #0
 8000812:	5f12      	ldrsh	r2, [r2, r4]
 8000814:	2400      	movs	r4, #0
 8000816:	5f1b      	ldrsh	r3, [r3, r4]
 8000818:	429a      	cmp	r2, r3
 800081a:	dd11      	ble.n	8000840 <SH1106_Draw_Line+0x170>
      error -= deltaY;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	183b      	adds	r3, r7, r0
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b29a      	uxth	r2, r3
 8000828:	187b      	adds	r3, r7, r1
 800082a:	801a      	strh	r2, [r3, #0]
      startX += stepX;
 800082c:	2310      	movs	r3, #16
 800082e:	18fb      	adds	r3, r7, r3
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	b2d9      	uxtb	r1, r3
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	188a      	adds	r2, r1, r2
 800083c:	701a      	strb	r2, [r3, #0]
 800083e:	e7ab      	b.n	8000798 <SH1106_Draw_Line+0xc8>
    } else {
      error += deltaX;
 8000840:	2116      	movs	r1, #22
 8000842:	187b      	adds	r3, r7, r1
 8000844:	881a      	ldrh	r2, [r3, #0]
 8000846:	2314      	movs	r3, #20
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	187b      	adds	r3, r7, r1
 8000852:	801a      	strh	r2, [r3, #0]
      startY += stepY;
 8000854:	230e      	movs	r3, #14
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b2d9      	uxtb	r1, r3
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	1dba      	adds	r2, r7, #6
 8000860:	7812      	ldrb	r2, [r2, #0]
 8000862:	188a      	adds	r2, r1, r2
 8000864:	701a      	strb	r2, [r3, #0]
  while(1) {
 8000866:	e797      	b.n	8000798 <SH1106_Draw_Line+0xc8>
      break;
 8000868:	46c0      	nop			@ (mov r8, r8)
    }
  }
  SH1106_Transmit_Buffer();
 800086a:	f7ff fefb 	bl	8000664 <SH1106_Transmit_Buffer>
 800086e:	e000      	b.n	8000872 <SH1106_Draw_Line+0x1a2>
    return;
 8000870:	46c0      	nop			@ (mov r8, r8)
}
 8000872:	46bd      	mov	sp, r7
 8000874:	b006      	add	sp, #24
 8000876:	bdb0      	pop	{r4, r5, r7, pc}
 8000878:	200000f4 	.word	0x200000f4

0800087c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <HAL_MspInit+0x44>)
 8000884:	699a      	ldr	r2, [r3, #24]
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <HAL_MspInit+0x44>)
 8000888:	2101      	movs	r1, #1
 800088a:	430a      	orrs	r2, r1
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <HAL_MspInit+0x44>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	2201      	movs	r2, #1
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <HAL_MspInit+0x44>)
 800089c:	69da      	ldr	r2, [r3, #28]
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <HAL_MspInit+0x44>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	0549      	lsls	r1, r1, #21
 80008a4:	430a      	orrs	r2, r1
 80008a6:	61da      	str	r2, [r3, #28]
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_MspInit+0x44>)
 80008aa:	69da      	ldr	r2, [r3, #28]
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	055b      	lsls	r3, r3, #21
 80008b0:	4013      	ands	r3, r2
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	b002      	add	sp, #8
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b08b      	sub	sp, #44	@ 0x2c
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	2414      	movs	r4, #20
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f002 fcd8 	bl	800328c <memset>
  if(hi2c->Instance==I2C1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a33      	ldr	r2, [pc, #204]	@ (80009b0 <HAL_I2C_MspInit+0xec>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d15f      	bne.n	80009a6 <HAL_I2C_MspInit+0xe2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4b33      	ldr	r3, [pc, #204]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 80008e8:	695a      	ldr	r2, [r3, #20]
 80008ea:	4b32      	ldr	r3, [pc, #200]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 80008ec:	2180      	movs	r1, #128	@ 0x80
 80008ee:	02c9      	lsls	r1, r1, #11
 80008f0:	430a      	orrs	r2, r1
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	4b2f      	ldr	r3, [pc, #188]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 80008f6:	695a      	ldr	r2, [r3, #20]
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	02db      	lsls	r3, r3, #11
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000902:	0021      	movs	r1, r4
 8000904:	187b      	adds	r3, r7, r1
 8000906:	22c0      	movs	r2, #192	@ 0xc0
 8000908:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2212      	movs	r2, #18
 800090e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2201      	movs	r2, #1
 8000914:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2203      	movs	r2, #3
 800091a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2201      	movs	r2, #1
 8000920:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000922:	187b      	adds	r3, r7, r1
 8000924:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <HAL_I2C_MspInit+0xf4>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f000 fb53 	bl	8000fd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 8000930:	69da      	ldr	r2, [r3, #28]
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	0389      	lsls	r1, r1, #14
 8000938:	430a      	orrs	r2, r1
 800093a:	61da      	str	r2, [r3, #28]
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <HAL_I2C_MspInit+0xf0>)
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	2380      	movs	r3, #128	@ 0x80
 8000942:	039b      	lsls	r3, r3, #14
 8000944:	4013      	ands	r3, r2
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 800094a:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 800094c:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <HAL_I2C_MspInit+0xfc>)
 800094e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000952:	2210      	movs	r2, #16
 8000954:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000962:	4b16      	ldr	r3, [pc, #88]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800096e:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 800097c:	0018      	movs	r0, r3
 800097e:	f000 f9d1 	bl	8000d24 <HAL_DMA_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <HAL_I2C_MspInit+0xc6>
    {
      Error_Handler();
 8000986:	f7ff fd4b 	bl	8000420 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a0b      	ldr	r2, [pc, #44]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 800098e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <HAL_I2C_MspInit+0xf8>)
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	2017      	movs	r0, #23
 800099c:	f000 f990 	bl	8000cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80009a0:	2017      	movs	r0, #23
 80009a2:	f000 f9a2 	bl	8000cea <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b00b      	add	sp, #44	@ 0x2c
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40005400 	.word	0x40005400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000400 	.word	0x48000400
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	4002001c 	.word	0x4002001c

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f8a0 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <DMA1_Channel2_3_IRQHandler+0x14>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fa1d 	bl	8000e3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	200000a8 	.word	0x200000a8

08000a10 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000a14:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	23e0      	movs	r3, #224	@ 0xe0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d004      	beq.n	8000a2c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fe2f 	bl	8001688 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000a2a:	e003      	b.n	8000a34 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <I2C1_IRQHandler+0x2c>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fe10 	bl	8001654 <HAL_I2C_EV_IRQHandler>
}
 8000a34:	46c0      	nop			@ (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	20000054 	.word	0x20000054

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a4c:	480d      	ldr	r0, [pc, #52]	@ (8000a84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a50:	f7ff fff6 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <LoopForever+0xe>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a98 <LoopForever+0x16>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a7a:	f002 fc0f 	bl	800329c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a7e:	f7ff fbcf 	bl	8000220 <main>

08000a82 <LoopForever>:

LoopForever:
    b LoopForever
 8000a82:	e7fe      	b.n	8000a82 <LoopForever>
  ldr   r0, =_estack
 8000a84:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000a90:	08003348 	.word	0x08003348
  ldr r2, =_sbss
 8000a94:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000a98:	200004f8 	.word	0x200004f8

08000a9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC1_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <HAL_Init+0x24>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_Init+0x24>)
 8000aaa:	2110      	movs	r1, #16
 8000aac:	430a      	orrs	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 f809 	bl	8000ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab6:	f7ff fee1 	bl	800087c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	0018      	movs	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	40022000 	.word	0x40022000

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_InitTick+0x5c>)
 8000ad2:	681c      	ldr	r4, [r3, #0]
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_InitTick+0x60>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	0019      	movs	r1, r3
 8000ada:	23fa      	movs	r3, #250	@ 0xfa
 8000adc:	0098      	lsls	r0, r3, #2
 8000ade:	f7ff fb13 	bl	8000108 <__udivsi3>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff fb0e 	bl	8000108 <__udivsi3>
 8000aec:	0003      	movs	r3, r0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 f90b 	bl	8000d0a <HAL_SYSTICK_Config>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	e00f      	b.n	8000b1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d80b      	bhi.n	8000b1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f8d8 	bl	8000cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_InitTick+0x64>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b003      	add	sp, #12
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	2000002c 	.word	0x2000002c
 8000b28:	20000034 	.word	0x20000034
 8000b2c:	20000030 	.word	0x20000030

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_IncTick+0x20>)
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			@ (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	20000034 	.word	0x20000034
 8000b50:	200004f4 	.word	0x200004f4

08000b54 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	@ (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	200004f4 	.word	0x200004f4

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b7a:	d809      	bhi.n	8000b90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	231f      	movs	r3, #31
 8000b84:	401a      	ands	r2, r3
 8000b86:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_EnableIRQ+0x30>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4091      	lsls	r1, r2
 8000b8c:	000a      	movs	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
  }
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bb0:	d828      	bhi.n	8000c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	33c0      	adds	r3, #192	@ 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	589b      	ldr	r3, [r3, r2]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	400a      	ands	r2, r1
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	21ff      	movs	r1, #255	@ 0xff
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	22ff      	movs	r2, #255	@ 0xff
 8000be0:	401a      	ands	r2, r3
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	2303      	movs	r3, #3
 8000bea:	4003      	ands	r3, r0
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	481f      	ldr	r0, [pc, #124]	@ (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	33c0      	adds	r3, #192	@ 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c02:	e031      	b.n	8000c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4a1b      	ldr	r2, [pc, #108]	@ (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	400b      	ands	r3, r1
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3306      	adds	r3, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	@ 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	@ 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4809      	ldr	r0, [pc, #36]	@ (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001c      	movs	r4, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	4023      	ands	r3, r4
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	3306      	adds	r3, #6
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	18c3      	adds	r3, r0, r3
 8000c64:	3304      	adds	r3, #4
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b003      	add	sp, #12
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	2380      	movs	r3, #128	@ 0x80
 8000c86:	045b      	lsls	r3, r3, #17
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d301      	bcc.n	8000c90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e010      	b.n	8000cb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <SysTick_Config+0x44>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	3a01      	subs	r2, #1
 8000c96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff ff7c 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x44>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff33 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ffaf 	bl	8000c78 <SysTick_Config>
 8000d1a:	0003      	movs	r3, r0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e036      	b.n	8000da8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2221      	movs	r2, #33	@ 0x21
 8000d3e:	2102      	movs	r1, #2
 8000d40:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <HAL_DMA_Init+0x8c>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69db      	ldr	r3, [r3, #28]
 8000d78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d7a:	68fa      	ldr	r2, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 f906 	bl	8000f9c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2221      	movs	r2, #33	@ 0x21
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2220      	movs	r2, #32
 8000da2:	2100      	movs	r1, #0
 8000da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b004      	add	sp, #16
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	ffffc00f 	.word	0xffffc00f

08000db4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2221      	movs	r2, #33	@ 0x21
 8000dc8:	5c9b      	ldrb	r3, [r3, r2]
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d006      	beq.n	8000dde <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e028      	b.n	8000e30 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	210e      	movs	r1, #14
 8000dea:	438a      	bics	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	438a      	bics	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e06:	2101      	movs	r1, #1
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2221      	movs	r2, #33	@ 0x21
 8000e12:	2101      	movs	r1, #1
 8000e14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2220      	movs	r2, #32
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	0010      	movs	r0, r2
 8000e2e:	4798      	blx	r3
    }
  }
  return status;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	68fa      	ldr	r2, [r7, #12]
 8000e62:	4013      	ands	r3, r2
 8000e64:	d024      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x72>
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d020      	beq.n	8000eb0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2220      	movs	r2, #32
 8000e76:	4013      	ands	r3, r2
 8000e78:	d107      	bne.n	8000e8a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2104      	movs	r1, #4
 8000e86:	438a      	bics	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e92:	2104      	movs	r1, #4
 8000e94:	4091      	lsls	r1, r2
 8000e96:	000a      	movs	r2, r1
 8000e98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <HAL_DMA_IRQHandler+0x66>
 8000ea2:	e06a      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	0010      	movs	r0, r2
 8000eac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000eae:	e064      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d02b      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xda>
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	d027      	beq.n	8000f18 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2220      	movs	r2, #32
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d10b      	bne.n	8000eec <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	210a      	movs	r1, #10
 8000ee0:	438a      	bics	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2221      	movs	r2, #33	@ 0x21
 8000ee8:	2101      	movs	r1, #1
 8000eea:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	4091      	lsls	r1, r2
 8000ef8:	000a      	movs	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2220      	movs	r2, #32
 8000f00:	2100      	movs	r1, #0
 8000f02:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d036      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	0010      	movs	r0, r2
 8000f14:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000f16:	e030      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	2208      	movs	r2, #8
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	d028      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d024      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	210e      	movs	r1, #14
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4091      	lsls	r1, r2
 8000f4c:	000a      	movs	r2, r1
 8000f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2221      	movs	r2, #33	@ 0x21
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2220      	movs	r2, #32
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d005      	beq.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	0010      	movs	r0, r2
 8000f76:	4798      	blx	r3
    }
  }
}
 8000f78:	e7ff      	b.n	8000f7a <HAL_DMA_IRQHandler+0x13c>
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b004      	add	sp, #16
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2221      	movs	r2, #33	@ 0x21
 8000f8e:	5c9b      	ldrb	r3, [r3, r2]
 8000f90:	b2db      	uxtb	r3, r3
}
 8000f92:	0018      	movs	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	b002      	add	sp, #8
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a08      	ldr	r2, [pc, #32]	@ (8000fcc <DMA_CalcBaseAndBitshift+0x30>)
 8000faa:	4694      	mov	ip, r2
 8000fac:	4463      	add	r3, ip
 8000fae:	2114      	movs	r1, #20
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f7ff f8a9 	bl	8000108 <__udivsi3>
 8000fb6:	0003      	movs	r3, r0
 8000fb8:	009a      	lsls	r2, r3, #2
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a03      	ldr	r2, [pc, #12]	@ (8000fd0 <DMA_CalcBaseAndBitshift+0x34>)
 8000fc2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	bffdfff8 	.word	0xbffdfff8
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe2:	e14f      	b.n	8001284 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x28>
 8000ffa:	e140      	b.n	800127e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	4013      	ands	r3, r2
 8001004:	2b01      	cmp	r3, #1
 8001006:	d005      	beq.n	8001014 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001010:	2b02      	cmp	r3, #2
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	409a      	lsls	r2, r3
 8001022:	0013      	movs	r3, r2
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	409a      	lsls	r2, r3
 8001036:	0013      	movs	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	2201      	movs	r2, #1
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2203      	movs	r2, #3
 800107c:	4013      	ands	r3, r2
 800107e:	2b03      	cmp	r3, #3
 8001080:	d017      	beq.n	80010b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	43da      	mvns	r2, r3
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4013      	ands	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d123      	bne.n	8001106 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	58d3      	ldr	r3, [r2, r3]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2207      	movs	r2, #7
 80010d0:	4013      	ands	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	43da      	mvns	r2, r3
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2107      	movs	r1, #7
 80010ea:	400b      	ands	r3, r1
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	409a      	lsls	r2, r3
 80010f0:	0013      	movs	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	6939      	ldr	r1, [r7, #16]
 8001104:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	43da      	mvns	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2203      	movs	r2, #3
 8001124:	401a      	ands	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	409a      	lsls	r2, r3
 800112c:	0013      	movs	r3, r2
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	23c0      	movs	r3, #192	@ 0xc0
 8001140:	029b      	lsls	r3, r3, #10
 8001142:	4013      	ands	r3, r2
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x174>
 8001146:	e09a      	b.n	800127e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001148:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 800114a:	699a      	ldr	r2, [r3, #24]
 800114c:	4b53      	ldr	r3, [pc, #332]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 800114e:	2101      	movs	r1, #1
 8001150:	430a      	orrs	r2, r1
 8001152:	619a      	str	r2, [r3, #24]
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_GPIO_Init+0x2c8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001160:	4a4f      	ldr	r2, [pc, #316]	@ (80012a0 <HAL_GPIO_Init+0x2cc>)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	089b      	lsrs	r3, r3, #2
 8001166:	3302      	adds	r3, #2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	589b      	ldr	r3, [r3, r2]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	2203      	movs	r2, #3
 8001172:	4013      	ands	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	220f      	movs	r2, #15
 8001178:	409a      	lsls	r2, r3
 800117a:	0013      	movs	r3, r2
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	2390      	movs	r3, #144	@ 0x90
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	429a      	cmp	r2, r3
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x1e2>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a44      	ldr	r2, [pc, #272]	@ (80012a4 <HAL_GPIO_Init+0x2d0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x1de>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a43      	ldr	r2, [pc, #268]	@ (80012a8 <HAL_GPIO_Init+0x2d4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x1da>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a42      	ldr	r2, [pc, #264]	@ (80012ac <HAL_GPIO_Init+0x2d8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x1d6>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x1e4>
 80011b6:	2300      	movs	r3, #0
 80011b8:	697a      	ldr	r2, [r7, #20]
 80011ba:	2103      	movs	r1, #3
 80011bc:	400a      	ands	r2, r1
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	@ (80012a0 <HAL_GPIO_Init+0x2cc>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	035b      	lsls	r3, r3, #13
 80011ee:	4013      	ands	r3, r2
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011fa:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001200:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	2380      	movs	r3, #128	@ 0x80
 8001216:	039b      	lsls	r3, r3, #14
 8001218:	4013      	ands	r3, r2
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800122a:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43da      	mvns	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	029b      	lsls	r3, r3, #10
 8001242:	4013      	ands	r3, r2
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800124e:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001254:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	025b      	lsls	r3, r3, #9
 800126c:	4013      	ands	r3, r2
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_GPIO_Init+0x2dc>)
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	40da      	lsrs	r2, r3
 800128c:	1e13      	subs	r3, r2, #0
 800128e:	d000      	beq.n	8001292 <HAL_GPIO_Init+0x2be>
 8001290:	e6a8      	b.n	8000fe4 <HAL_GPIO_Init+0x10>
  } 
}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b006      	add	sp, #24
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800
 80012ac:	48000c00 	.word	0x48000c00
 80012b0:	40010400 	.word	0x40010400

080012b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e08f      	b.n	80013e6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2241      	movs	r2, #65	@ 0x41
 80012ca:	5c9b      	ldrb	r3, [r3, r2]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2240      	movs	r2, #64	@ 0x40
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff faf1 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2241      	movs	r2, #65	@ 0x41
 80012e6:	2124      	movs	r1, #36	@ 0x24
 80012e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	493b      	ldr	r1, [pc, #236]	@ (80013f0 <HAL_I2C_Init+0x13c>)
 8001304:	400a      	ands	r2, r1
 8001306:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4938      	ldr	r1, [pc, #224]	@ (80013f4 <HAL_I2C_Init+0x140>)
 8001314:	400a      	ands	r2, r1
 8001316:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2180      	movs	r1, #128	@ 0x80
 800132a:	0209      	lsls	r1, r1, #8
 800132c:	430a      	orrs	r2, r1
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	e007      	b.n	8001342 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2184      	movs	r1, #132	@ 0x84
 800133c:	0209      	lsls	r1, r1, #8
 800133e:	430a      	orrs	r2, r1
 8001340:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d109      	bne.n	800135e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	0109      	lsls	r1, r1, #4
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	e007      	b.n	800136e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4923      	ldr	r1, [pc, #140]	@ (80013f8 <HAL_I2C_Init+0x144>)
 800136a:	400a      	ands	r2, r1
 800136c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4920      	ldr	r1, [pc, #128]	@ (80013fc <HAL_I2C_Init+0x148>)
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	491a      	ldr	r1, [pc, #104]	@ (80013f4 <HAL_I2C_Init+0x140>)
 800138a:	400a      	ands	r2, r1
 800138c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	431a      	orrs	r2, r3
 8001398:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69d9      	ldr	r1, [r3, #28]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2241      	movs	r2, #65	@ 0x41
 80013d2:	2120      	movs	r1, #32
 80013d4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2242      	movs	r2, #66	@ 0x42
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	f0ffffff 	.word	0xf0ffffff
 80013f4:	ffff7fff 	.word	0xffff7fff
 80013f8:	fffff7ff 	.word	0xfffff7ff
 80013fc:	02008000 	.word	0x02008000

08001400 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af02      	add	r7, sp, #8
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	0008      	movs	r0, r1
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	0019      	movs	r1, r3
 800140e:	230a      	movs	r3, #10
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	1c02      	adds	r2, r0, #0
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	2308      	movs	r3, #8
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	1c0a      	adds	r2, r1, #0
 800141c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2241      	movs	r2, #65	@ 0x41
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b20      	cmp	r3, #32
 8001428:	d000      	beq.n	800142c <HAL_I2C_Master_Transmit+0x2c>
 800142a:	e10a      	b.n	8001642 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	@ 0x40
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d101      	bne.n	800143a <HAL_I2C_Master_Transmit+0x3a>
 8001436:	2302      	movs	r3, #2
 8001438:	e104      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2240      	movs	r2, #64	@ 0x40
 800143e:	2101      	movs	r1, #1
 8001440:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001442:	f7ff fb87 	bl	8000b54 <HAL_GetTick>
 8001446:	0003      	movs	r3, r0
 8001448:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800144a:	2380      	movs	r3, #128	@ 0x80
 800144c:	0219      	lsls	r1, r3, #8
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2319      	movs	r3, #25
 8001456:	2201      	movs	r2, #1
 8001458:	f000 fefc 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0ef      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2241      	movs	r2, #65	@ 0x41
 8001468:	2121      	movs	r1, #33	@ 0x21
 800146a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2242      	movs	r2, #66	@ 0x42
 8001470:	2110      	movs	r1, #16
 8001472:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2200      	movs	r2, #0
 8001478:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2208      	movs	r2, #8
 8001484:	18ba      	adds	r2, r7, r2
 8001486:	8812      	ldrh	r2, [r2, #0]
 8001488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001494:	b29b      	uxth	r3, r3
 8001496:	2bff      	cmp	r3, #255	@ 0xff
 8001498:	d906      	bls.n	80014a8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	22ff      	movs	r2, #255	@ 0xff
 800149e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	045b      	lsls	r3, r3, #17
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e007      	b.n	80014b8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014b2:	2380      	movs	r3, #128	@ 0x80
 80014b4:	049b      	lsls	r3, r3, #18
 80014b6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d027      	beq.n	8001510 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014da:	b29b      	uxth	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	697c      	ldr	r4, [r7, #20]
 80014fc:	230a      	movs	r3, #10
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	8819      	ldrh	r1, [r3, #0]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	4b51      	ldr	r3, [pc, #324]	@ (800164c <HAL_I2C_Master_Transmit+0x24c>)
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	0023      	movs	r3, r4
 800150a:	f001 f87d 	bl	8002608 <I2C_TransferConfig>
 800150e:	e06f      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001514:	b2da      	uxtb	r2, r3
 8001516:	697c      	ldr	r4, [r7, #20]
 8001518:	230a      	movs	r3, #10
 800151a:	18fb      	adds	r3, r7, r3
 800151c:	8819      	ldrh	r1, [r3, #0]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_I2C_Master_Transmit+0x24c>)
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	0023      	movs	r3, r4
 8001526:	f001 f86f 	bl	8002608 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800152a:	e061      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	0018      	movs	r0, r3
 8001534:	f000 fee6 	bl	8002304 <I2C_WaitOnTXISFlagUntilTimeout>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e081      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001568:	3b01      	subs	r3, #1
 800156a:	b29a      	uxth	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001574:	b29b      	uxth	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d03a      	beq.n	80015f0 <HAL_I2C_Master_Transmit+0x1f0>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800157e:	2b00      	cmp	r3, #0
 8001580:	d136      	bne.n	80015f0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	0013      	movs	r3, r2
 800158c:	2200      	movs	r2, #0
 800158e:	2180      	movs	r1, #128	@ 0x80
 8001590:	f000 fe60 	bl	8002254 <I2C_WaitOnFlagUntilTimeout>
 8001594:	1e03      	subs	r3, r0, #0
 8001596:	d001      	beq.n	800159c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e053      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	2bff      	cmp	r3, #255	@ 0xff
 80015a4:	d911      	bls.n	80015ca <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	22ff      	movs	r2, #255	@ 0xff
 80015aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	2380      	movs	r3, #128	@ 0x80
 80015b4:	045c      	lsls	r4, r3, #17
 80015b6:	230a      	movs	r3, #10
 80015b8:	18fb      	adds	r3, r7, r3
 80015ba:	8819      	ldrh	r1, [r3, #0]
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	0023      	movs	r3, r4
 80015c4:	f001 f820 	bl	8002608 <I2C_TransferConfig>
 80015c8:	e012      	b.n	80015f0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	2380      	movs	r3, #128	@ 0x80
 80015dc:	049c      	lsls	r4, r3, #18
 80015de:	230a      	movs	r3, #10
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	8819      	ldrh	r1, [r3, #0]
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	2300      	movs	r3, #0
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	0023      	movs	r3, r4
 80015ec:	f001 f80c 	bl	8002608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d198      	bne.n	800152c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	0018      	movs	r0, r3
 8001602:	f000 fec5 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001606:	1e03      	subs	r3, r0, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e01a      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2220      	movs	r2, #32
 8001614:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	490b      	ldr	r1, [pc, #44]	@ (8001650 <HAL_I2C_Master_Transmit+0x250>)
 8001622:	400a      	ands	r2, r1
 8001624:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2241      	movs	r2, #65	@ 0x41
 800162a:	2120      	movs	r1, #32
 800162c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2242      	movs	r2, #66	@ 0x42
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2240      	movs	r2, #64	@ 0x40
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b007      	add	sp, #28
 800164a:	bd90      	pop	{r4, r7, pc}
 800164c:	80002000 	.word	0x80002000
 8001650:	fe00e800 	.word	0xfe00e800

08001654 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	68f9      	ldr	r1, [r7, #12]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
  }
}
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	d00e      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	2280      	movs	r2, #128	@ 0x80
 80016ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016b0:	d00a      	beq.n	80016c8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	2201      	movs	r2, #1
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	0052      	lsls	r2, r2, #1
 80016c6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4013      	ands	r3, r2
 80016d0:	d00e      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	2280      	movs	r2, #128	@ 0x80
 80016d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80016d8:	d00a      	beq.n	80016f0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	2208      	movs	r2, #8
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2280      	movs	r2, #128	@ 0x80
 80016ec:	00d2      	lsls	r2, r2, #3
 80016ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4013      	ands	r3, r2
 80016f8:	d00e      	beq.n	8001718 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001700:	d00a      	beq.n	8001718 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	2202      	movs	r2, #2
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2280      	movs	r2, #128	@ 0x80
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	220b      	movs	r2, #11
 8001722:	4013      	ands	r3, r2
 8001724:	d005      	beq.n	8001732 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f000 fc25 	bl	8001f7c <I2C_ITError>
  }
}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b006      	add	sp, #24
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	0008      	movs	r0, r1
 8001764:	0011      	movs	r1, r2
 8001766:	1cfb      	adds	r3, r7, #3
 8001768:	1c02      	adds	r2, r0, #0
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	003b      	movs	r3, r7
 800176e:	1c0a      	adds	r2, r1, #0
 8001770:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b002      	add	sp, #8
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017a2:	46c0      	nop			@ (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <I2C_Slave_ISR_IT+0x24>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0e7      	b.n	80019a0 <I2C_Slave_ISR_IT+0x1f4>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2240      	movs	r2, #64	@ 0x40
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2220      	movs	r2, #32
 80017dc:	4013      	ands	r3, r2
 80017de:	d00a      	beq.n	80017f6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80017e6:	d006      	beq.n	80017f6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	0011      	movs	r1, r2
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f9e4 	bl	8001bbc <I2C_ITSlaveCplt>
 80017f4:	e0cf      	b.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2210      	movs	r2, #16
 80017fa:	4013      	ands	r3, r2
 80017fc:	d052      	beq.n	80018a4 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2210      	movs	r2, #16
 8001802:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001804:	d04e      	beq.n	80018a4 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d12d      	bne.n	800186c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2241      	movs	r2, #65	@ 0x41
 8001814:	5c9b      	ldrb	r3, [r3, r2]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b28      	cmp	r3, #40	@ 0x28
 800181a:	d10b      	bne.n	8001834 <I2C_Slave_ISR_IT+0x88>
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	2380      	movs	r3, #128	@ 0x80
 8001820:	049b      	lsls	r3, r3, #18
 8001822:	429a      	cmp	r2, r3
 8001824:	d106      	bne.n	8001834 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	0011      	movs	r1, r2
 800182c:	0018      	movs	r0, r3
 800182e:	f000 fb4d 	bl	8001ecc <I2C_ITListenCplt>
 8001832:	e036      	b.n	80018a2 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2241      	movs	r2, #65	@ 0x41
 8001838:	5c9b      	ldrb	r3, [r3, r2]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b29      	cmp	r3, #41	@ 0x29
 800183e:	d110      	bne.n	8001862 <I2C_Slave_ISR_IT+0xb6>
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4a59      	ldr	r2, [pc, #356]	@ (80019a8 <I2C_Slave_ISR_IT+0x1fc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d00c      	beq.n	8001862 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2210      	movs	r2, #16
 800184e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fcbd 	bl	80021d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	0018      	movs	r0, r3
 800185c:	f000 f94a 	bl	8001af4 <I2C_ITSlaveSeqCplt>
 8001860:	e01f      	b.n	80018a2 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2210      	movs	r2, #16
 8001868:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800186a:	e091      	b.n	8001990 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2210      	movs	r2, #16
 8001872:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001878:	2204      	movs	r2, #4
 800187a:	431a      	orrs	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <I2C_Slave_ISR_IT+0xe6>
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	045b      	lsls	r3, r3, #17
 800188c:	429a      	cmp	r2, r3
 800188e:	d000      	beq.n	8001892 <I2C_Slave_ISR_IT+0xe6>
 8001890:	e07e      	b.n	8001990 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f000 fb6e 	bl	8001f7c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018a0:	e076      	b.n	8001990 <I2C_Slave_ISR_IT+0x1e4>
 80018a2:	e075      	b.n	8001990 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	2204      	movs	r2, #4
 80018a8:	4013      	ands	r3, r2
 80018aa:	d02f      	beq.n	800190c <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2204      	movs	r2, #4
 80018b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80018b2:	d02b      	beq.n	800190c <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d018      	beq.n	80018f0 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	b29a      	uxth	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d14c      	bne.n	8001994 <I2C_Slave_ISR_IT+0x1e8>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	4a2a      	ldr	r2, [pc, #168]	@ (80019a8 <I2C_Slave_ISR_IT+0x1fc>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d048      	beq.n	8001994 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	0018      	movs	r0, r3
 8001906:	f000 f8f5 	bl	8001af4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800190a:	e043      	b.n	8001994 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	2208      	movs	r2, #8
 8001910:	4013      	ands	r3, r2
 8001912:	d00a      	beq.n	800192a <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2208      	movs	r2, #8
 8001918:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800191a:	d006      	beq.n	800192a <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	0011      	movs	r1, r2
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f842 	bl	80019ac <I2C_ITAddrCplt>
 8001928:	e035      	b.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2202      	movs	r2, #2
 800192e:	4013      	ands	r3, r2
 8001930:	d031      	beq.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001938:	d02d      	beq.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800193e:	b29b      	uxth	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d018      	beq.n	8001976 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	781a      	ldrb	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800196c:	3b01      	subs	r3, #1
 800196e:	b29a      	uxth	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	851a      	strh	r2, [r3, #40]	@ 0x28
 8001974:	e00f      	b.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	2380      	movs	r3, #128	@ 0x80
 800197a:	045b      	lsls	r3, r3, #17
 800197c:	429a      	cmp	r2, r3
 800197e:	d002      	beq.n	8001986 <I2C_Slave_ISR_IT+0x1da>
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d107      	bne.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	0018      	movs	r0, r3
 800198a:	f000 f8b3 	bl	8001af4 <I2C_ITSlaveSeqCplt>
 800198e:	e002      	b.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	e000      	b.n	8001996 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8001994:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2240      	movs	r2, #64	@ 0x40
 800199a:	2100      	movs	r1, #0
 800199c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b006      	add	sp, #24
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	ffff0000 	.word	0xffff0000

080019ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2241      	movs	r2, #65	@ 0x41
 80019ba:	5c9b      	ldrb	r3, [r3, r2]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	001a      	movs	r2, r3
 80019c0:	2328      	movs	r3, #40	@ 0x28
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b28      	cmp	r3, #40	@ 0x28
 80019c6:	d000      	beq.n	80019ca <I2C_ITAddrCplt+0x1e>
 80019c8:	e088      	b.n	8001adc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	250f      	movs	r5, #15
 80019d6:	197b      	adds	r3, r7, r5
 80019d8:	2101      	movs	r1, #1
 80019da:	400a      	ands	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	200c      	movs	r0, #12
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	21fe      	movs	r1, #254	@ 0xfe
 80019ee:	400a      	ands	r2, r1
 80019f0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	240a      	movs	r4, #10
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	0592      	lsls	r2, r2, #22
 8001a00:	0d92      	lsrs	r2, r2, #22
 8001a02:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	21fe      	movs	r1, #254	@ 0xfe
 8001a12:	400a      	ands	r2, r1
 8001a14:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d148      	bne.n	8001ab0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a1e:	0021      	movs	r1, r4
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	09db      	lsrs	r3, r3, #7
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	183b      	adds	r3, r7, r0
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	4053      	eors	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	001a      	movs	r2, r3
 8001a32:	2306      	movs	r3, #6
 8001a34:	4013      	ands	r3, r2
 8001a36:	d120      	bne.n	8001a7a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001a38:	183b      	adds	r3, r7, r0
 8001a3a:	187a      	adds	r2, r7, r1
 8001a3c:	8812      	ldrh	r2, [r2, #0]
 8001a3e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d14c      	bne.n	8001aec <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2240      	movs	r2, #64	@ 0x40
 8001a64:	2100      	movs	r1, #0
 8001a66:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a68:	183b      	adds	r3, r7, r0
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	197b      	adds	r3, r7, r5
 8001a6e:	7819      	ldrb	r1, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fe71 	bl	800175a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a78:	e038      	b.n	8001aec <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001a7a:	240c      	movs	r4, #12
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2208      	movs	r2, #8
 8001a80:	18ba      	adds	r2, r7, r2
 8001a82:	8812      	ldrh	r2, [r2, #0]
 8001a84:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a86:	2380      	movs	r3, #128	@ 0x80
 8001a88:	021a      	lsls	r2, r3, #8
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	0011      	movs	r1, r2
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 fdf4 	bl	800267c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	@ 0x40
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	18fb      	adds	r3, r7, r3
 8001aa4:	7819      	ldrb	r1, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fe56 	bl	800175a <HAL_I2C_AddrCallback>
}
 8001aae:	e01d      	b.n	8001aec <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	021a      	lsls	r2, r3, #8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	0011      	movs	r1, r2
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f000 fddf 	bl	800267c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2240      	movs	r2, #64	@ 0x40
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	230f      	movs	r3, #15
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	7819      	ldrb	r1, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fe40 	bl	800175a <HAL_I2C_AddrCallback>
}
 8001ada:	e007      	b.n	8001aec <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2208      	movs	r2, #8
 8001ae2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]
}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bdb0      	pop	{r4, r5, r7, pc}

08001af4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2242      	movs	r2, #66	@ 0x42
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	01db      	lsls	r3, r3, #7
 8001b12:	4013      	ands	r3, r2
 8001b14:	d008      	beq.n	8001b28 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4924      	ldr	r1, [pc, #144]	@ (8001bb4 <I2C_ITSlaveSeqCplt+0xc0>)
 8001b22:	400a      	ands	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	e00c      	b.n	8001b42 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	021b      	lsls	r3, r3, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d007      	beq.n	8001b42 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	491e      	ldr	r1, [pc, #120]	@ (8001bb8 <I2C_ITSlaveSeqCplt+0xc4>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2241      	movs	r2, #65	@ 0x41
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b29      	cmp	r3, #41	@ 0x29
 8001b4c:	d114      	bne.n	8001b78 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2241      	movs	r2, #65	@ 0x41
 8001b52:	2128      	movs	r1, #40	@ 0x28
 8001b54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2221      	movs	r2, #33	@ 0x21
 8001b5a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2101      	movs	r1, #1
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 fd8b 	bl	800267c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2240      	movs	r2, #64	@ 0x40
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7ff fde2 	bl	800173a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b76:	e019      	b.n	8001bac <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2241      	movs	r2, #65	@ 0x41
 8001b7c:	5c9b      	ldrb	r3, [r3, r2]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b82:	d113      	bne.n	8001bac <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2241      	movs	r2, #65	@ 0x41
 8001b88:	2128      	movs	r1, #40	@ 0x28
 8001b8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2222      	movs	r2, #34	@ 0x22
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2102      	movs	r1, #2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 fd70 	bl	800267c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2240      	movs	r2, #64	@ 0x40
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fdcf 	bl	800174a <HAL_I2C_SlaveRxCpltCallback>
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	ffffbfff 	.word	0xffffbfff
 8001bb8:	ffff7fff 	.word	0xffff7fff

08001bbc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001bd8:	200b      	movs	r0, #11
 8001bda:	183b      	adds	r3, r7, r0
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	2141      	movs	r1, #65	@ 0x41
 8001be0:	5c52      	ldrb	r2, [r2, r1]
 8001be2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bec:	183b      	adds	r3, r7, r0
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b21      	cmp	r3, #33	@ 0x21
 8001bf2:	d003      	beq.n	8001bfc <I2C_ITSlaveCplt+0x40>
 8001bf4:	183b      	adds	r3, r7, r0
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b29      	cmp	r3, #41	@ 0x29
 8001bfa:	d109      	bne.n	8001c10 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001bfc:	4aac      	ldr	r2, [pc, #688]	@ (8001eb0 <I2C_ITSlaveCplt+0x2f4>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fd3a 	bl	800267c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2221      	movs	r2, #33	@ 0x21
 8001c0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c0e:	e020      	b.n	8001c52 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c10:	220b      	movs	r2, #11
 8001c12:	18bb      	adds	r3, r7, r2
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b22      	cmp	r3, #34	@ 0x22
 8001c18:	d003      	beq.n	8001c22 <I2C_ITSlaveCplt+0x66>
 8001c1a:	18bb      	adds	r3, r7, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c20:	d109      	bne.n	8001c36 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c22:	4aa4      	ldr	r2, [pc, #656]	@ (8001eb4 <I2C_ITSlaveCplt+0x2f8>)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 fd27 	bl	800267c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2222      	movs	r2, #34	@ 0x22
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c34:	e00d      	b.n	8001c52 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8001c36:	230b      	movs	r3, #11
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b28      	cmp	r3, #40	@ 0x28
 8001c3e:	d108      	bne.n	8001c52 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001c40:	4a9d      	ldr	r2, [pc, #628]	@ (8001eb8 <I2C_ITSlaveCplt+0x2fc>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0011      	movs	r1, r2
 8001c46:	0018      	movs	r0, r3
 8001c48:	f000 fd18 	bl	800267c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2180      	movs	r1, #128	@ 0x80
 8001c5e:	0209      	lsls	r1, r1, #8
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4993      	ldr	r1, [pc, #588]	@ (8001ebc <I2C_ITSlaveCplt+0x300>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f000 faab 	bl	80021d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	d013      	beq.n	8001cae <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	498b      	ldr	r1, [pc, #556]	@ (8001ec0 <I2C_ITSlaveCplt+0x304>)
 8001c92:	400a      	ands	r2, r1
 8001c94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01f      	beq.n	8001cde <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cac:	e017      	b.n	8001cde <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	021b      	lsls	r3, r3, #8
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d012      	beq.n	8001cde <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4980      	ldr	r1, [pc, #512]	@ (8001ec4 <I2C_ITSlaveCplt+0x308>)
 8001cc4:	400a      	ands	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d006      	beq.n	8001cde <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d020      	beq.n	8001d28 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4393      	bics	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	2204      	movs	r2, #4
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2210      	movs	r2, #16
 8001d42:	4013      	ands	r3, r2
 8001d44:	d04f      	beq.n	8001de6 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2210      	movs	r2, #16
 8001d4a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001d4c:	d04b      	beq.n	8001de6 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d12d      	bne.n	8001db4 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2241      	movs	r2, #65	@ 0x41
 8001d5c:	5c9b      	ldrb	r3, [r3, r2]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b28      	cmp	r3, #40	@ 0x28
 8001d62:	d10b      	bne.n	8001d7c <I2C_ITSlaveCplt+0x1c0>
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	049b      	lsls	r3, r3, #18
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d106      	bne.n	8001d7c <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0011      	movs	r1, r2
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 f8a9 	bl	8001ecc <I2C_ITListenCplt>
 8001d7a:	e034      	b.n	8001de6 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2241      	movs	r2, #65	@ 0x41
 8001d80:	5c9b      	ldrb	r3, [r3, r2]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b29      	cmp	r3, #41	@ 0x29
 8001d86:	d110      	bne.n	8001daa <I2C_ITSlaveCplt+0x1ee>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec8 <I2C_ITSlaveCplt+0x30c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00c      	beq.n	8001daa <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2210      	movs	r2, #16
 8001d96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa19 	bl	80021d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff fea6 	bl	8001af4 <I2C_ITSlaveSeqCplt>
 8001da8:	e01d      	b.n	8001de6 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2210      	movs	r2, #16
 8001db0:	61da      	str	r2, [r3, #28]
 8001db2:	e018      	b.n	8001de6 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d004      	beq.n	8001dd8 <I2C_ITSlaveCplt+0x21c>
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	045b      	lsls	r3, r3, #17
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d106      	bne.n	8001de6 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	0011      	movs	r1, r2
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 f8cb 	bl	8001f7c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2242      	movs	r2, #66	@ 0x42
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	0011      	movs	r1, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 f8b9 	bl	8001f7c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2241      	movs	r2, #65	@ 0x41
 8001e0e:	5c9b      	ldrb	r3, [r3, r2]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b28      	cmp	r3, #40	@ 0x28
 8001e14:	d147      	bne.n	8001ea6 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0011      	movs	r1, r2
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f000 f855 	bl	8001ecc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e22:	e040      	b.n	8001ea6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	4a27      	ldr	r2, [pc, #156]	@ (8001ec8 <I2C_ITSlaveCplt+0x30c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d016      	beq.n	8001e5c <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7ff fe5f 	bl	8001af4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a23      	ldr	r2, [pc, #140]	@ (8001ec8 <I2C_ITSlaveCplt+0x30c>)
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2241      	movs	r2, #65	@ 0x41
 8001e40:	2120      	movs	r1, #32
 8001e42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2240      	movs	r2, #64	@ 0x40
 8001e4e:	2100      	movs	r1, #0
 8001e50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0018      	movs	r0, r3
 8001e56:	f7ff fc90 	bl	800177a <HAL_I2C_ListenCpltCallback>
}
 8001e5a:	e024      	b.n	8001ea6 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2241      	movs	r2, #65	@ 0x41
 8001e60:	5c9b      	ldrb	r3, [r3, r2]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b22      	cmp	r3, #34	@ 0x22
 8001e66:	d10f      	bne.n	8001e88 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2241      	movs	r2, #65	@ 0x41
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2240      	movs	r2, #64	@ 0x40
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	0018      	movs	r0, r3
 8001e82:	f7ff fc62 	bl	800174a <HAL_I2C_SlaveRxCpltCallback>
}
 8001e86:	e00e      	b.n	8001ea6 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2241      	movs	r2, #65	@ 0x41
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2240      	movs	r2, #64	@ 0x40
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f7ff fc4a 	bl	800173a <HAL_I2C_SlaveTxCpltCallback>
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b006      	add	sp, #24
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	46c0      	nop			@ (mov r8, r8)
 8001eb0:	00008001 	.word	0x00008001
 8001eb4:	00008002 	.word	0x00008002
 8001eb8:	00008003 	.word	0x00008003
 8001ebc:	fe00e800 	.word	0xfe00e800
 8001ec0:	ffffbfff 	.word	0xffffbfff
 8001ec4:	ffff7fff 	.word	0xffff7fff
 8001ec8:	ffff0000 	.word	0xffff0000

08001ecc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a26      	ldr	r2, [pc, #152]	@ (8001f74 <I2C_ITListenCplt+0xa8>)
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2241      	movs	r2, #65	@ 0x41
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2242      	movs	r2, #66	@ 0x42
 8001eee:	2100      	movs	r1, #0
 8001ef0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2204      	movs	r2, #4
 8001efc:	4013      	ands	r3, r2
 8001efe:	d022      	beq.n	8001f46 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	2204      	movs	r2, #4
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f46:	4a0c      	ldr	r2, [pc, #48]	@ (8001f78 <I2C_ITListenCplt+0xac>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f000 fb95 	bl	800267c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2210      	movs	r2, #16
 8001f58:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2240      	movs	r2, #64	@ 0x40
 8001f5e:	2100      	movs	r1, #0
 8001f60:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fc08 	bl	800177a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b002      	add	sp, #8
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	ffff0000 	.word	0xffff0000
 8001f78:	00008003 	.word	0x00008003

08001f7c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f86:	200f      	movs	r0, #15
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	2141      	movs	r1, #65	@ 0x41
 8001f8e:	5c52      	ldrb	r2, [r2, r1]
 8001f90:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2242      	movs	r2, #66	@ 0x42
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a72      	ldr	r2, [pc, #456]	@ (8002168 <I2C_ITError+0x1ec>)
 8001f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b28      	cmp	r3, #40	@ 0x28
 8001fb8:	d007      	beq.n	8001fca <I2C_ITError+0x4e>
 8001fba:	183b      	adds	r3, r7, r0
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b29      	cmp	r3, #41	@ 0x29
 8001fc0:	d003      	beq.n	8001fca <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001fc2:	183b      	adds	r3, r7, r0
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fc8:	d10c      	bne.n	8001fe4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2103      	movs	r1, #3
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fb54 	bl	800267c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2241      	movs	r2, #65	@ 0x41
 8001fd8:	2128      	movs	r1, #40	@ 0x28
 8001fda:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a63      	ldr	r2, [pc, #396]	@ (800216c <I2C_ITError+0x1f0>)
 8001fe0:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fe2:	e032      	b.n	800204a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fe4:	4a62      	ldr	r2, [pc, #392]	@ (8002170 <I2C_ITError+0x1f4>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0011      	movs	r1, r2
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fb46 	bl	800267c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f8ed 	bl	80021d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2241      	movs	r2, #65	@ 0x41
 8001ffc:	5c9b      	ldrb	r3, [r3, r2]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b60      	cmp	r3, #96	@ 0x60
 8002002:	d01f      	beq.n	8002044 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2241      	movs	r2, #65	@ 0x41
 8002008:	2120      	movs	r1, #32
 800200a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	2b20      	cmp	r3, #32
 8002018:	d114      	bne.n	8002044 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2210      	movs	r2, #16
 8002022:	4013      	ands	r3, r2
 8002024:	2b10      	cmp	r3, #16
 8002026:	d109      	bne.n	800203c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2210      	movs	r2, #16
 800202e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002034:	2204      	movs	r2, #4
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03b      	beq.n	80020d0 <I2C_ITError+0x154>
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b11      	cmp	r3, #17
 800205c:	d002      	beq.n	8002064 <I2C_ITError+0xe8>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b21      	cmp	r3, #33	@ 0x21
 8002062:	d135      	bne.n	80020d0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	2380      	movs	r3, #128	@ 0x80
 800206c:	01db      	lsls	r3, r3, #7
 800206e:	401a      	ands	r2, r3
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	01db      	lsls	r3, r3, #7
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	493c      	ldr	r1, [pc, #240]	@ (8002174 <I2C_ITError+0x1f8>)
 8002084:	400a      	ands	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208c:	0018      	movs	r0, r3
 800208e:	f7fe ff78 	bl	8000f82 <HAL_DMA_GetState>
 8002092:	0003      	movs	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	d016      	beq.n	80020c6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209c:	4a36      	ldr	r2, [pc, #216]	@ (8002178 <I2C_ITError+0x1fc>)
 800209e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2240      	movs	r2, #64	@ 0x40
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe fe81 	bl	8000db4 <HAL_DMA_Abort_IT>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d051      	beq.n	800215a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020c0:	0018      	movs	r0, r3
 80020c2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020c4:	e049      	b.n	800215a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 f859 	bl	8002180 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020ce:	e044      	b.n	800215a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d03b      	beq.n	8002150 <I2C_ITError+0x1d4>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d002      	beq.n	80020e4 <I2C_ITError+0x168>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2b22      	cmp	r3, #34	@ 0x22
 80020e2:	d135      	bne.n	8002150 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	401a      	ands	r2, r3
 80020f0:	2380      	movs	r3, #128	@ 0x80
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d107      	bne.n	8002108 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	491e      	ldr	r1, [pc, #120]	@ (800217c <I2C_ITError+0x200>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe ff38 	bl	8000f82 <HAL_DMA_GetState>
 8002112:	0003      	movs	r3, r0
 8002114:	2b01      	cmp	r3, #1
 8002116:	d016      	beq.n	8002146 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211c:	4a16      	ldr	r2, [pc, #88]	@ (8002178 <I2C_ITError+0x1fc>)
 800211e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	0018      	movs	r0, r3
 800212e:	f7fe fe41 	bl	8000db4 <HAL_DMA_Abort_IT>
 8002132:	1e03      	subs	r3, r0, #0
 8002134:	d013      	beq.n	800215e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002140:	0018      	movs	r0, r3
 8002142:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002144:	e00b      	b.n	800215e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 f819 	bl	8002180 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800214e:	e006      	b.n	800215e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	0018      	movs	r0, r3
 8002154:	f000 f814 	bl	8002180 <I2C_TreatErrorCallback>
  }
}
 8002158:	e002      	b.n	8002160 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	e000      	b.n	8002160 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800215e:	46c0      	nop			@ (mov r8, r8)
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b004      	add	sp, #16
 8002166:	bd80      	pop	{r7, pc}
 8002168:	ffff0000 	.word	0xffff0000
 800216c:	080017ad 	.word	0x080017ad
 8002170:	00008003 	.word	0x00008003
 8002174:	ffffbfff 	.word	0xffffbfff
 8002178:	08002217 	.word	0x08002217
 800217c:	ffff7fff 	.word	0xffff7fff

08002180 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2241      	movs	r2, #65	@ 0x41
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b60      	cmp	r3, #96	@ 0x60
 8002192:	d10f      	bne.n	80021b4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2241      	movs	r2, #65	@ 0x41
 8002198:	2120      	movs	r1, #32
 800219a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2240      	movs	r2, #64	@ 0x40
 80021a6:	2100      	movs	r1, #0
 80021a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff faf4 	bl	800179a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021b2:	e00a      	b.n	80021ca <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2240      	movs	r2, #64	@ 0x40
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f7ff fae0 	bl	800178a <HAL_I2C_ErrorCallback>
}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b002      	add	sp, #8
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d103      	bne.n	80021f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d007      	beq.n	800220e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	430a      	orrs	r2, r1
 800220c:	619a      	str	r2, [r3, #24]
  }
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b002      	add	sp, #8
 8002214:	bd80      	pop	{r7, pc}

08002216 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b084      	sub	sp, #16
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002230:	2200      	movs	r2, #0
 8002232:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002240:	2200      	movs	r2, #0
 8002242:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	0018      	movs	r0, r3
 8002248:	f7ff ff9a 	bl	8002180 <I2C_TreatErrorCallback>
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}

08002254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	1dfb      	adds	r3, r7, #7
 8002262:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002264:	e03a      	b.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f8d3 	bl	8002418 <I2C_IsErrorOccurred>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e040      	b.n	80022fc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	d02d      	beq.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002280:	f7fe fc68 	bl	8000b54 <HAL_GetTick>
 8002284:	0002      	movs	r2, r0
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d302      	bcc.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d122      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	4013      	ands	r3, r2
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	425a      	negs	r2, r3
 80022a6:	4153      	adcs	r3, r2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	001a      	movs	r2, r3
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d113      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b8:	2220      	movs	r2, #32
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2241      	movs	r2, #65	@ 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2242      	movs	r2, #66	@ 0x42
 80022cc:	2100      	movs	r1, #0
 80022ce:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e00f      	b.n	80022fc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	425a      	negs	r2, r3
 80022ec:	4153      	adcs	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	001a      	movs	r2, r3
 80022f2:	1dfb      	adds	r3, r7, #7
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d0b5      	beq.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002310:	e032      	b.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 f87d 	bl	8002418 <I2C_IsErrorOccurred>
 800231e:	1e03      	subs	r3, r0, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e030      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3301      	adds	r3, #1
 800232a:	d025      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232c:	f7fe fc12 	bl	8000b54 <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	429a      	cmp	r2, r3
 800233a:	d302      	bcc.n	8002342 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d11a      	bne.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	2b02      	cmp	r3, #2
 800234e:	d013      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002354:	2220      	movs	r2, #32
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2241      	movs	r2, #65	@ 0x41
 8002360:	2120      	movs	r1, #32
 8002362:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2242      	movs	r2, #66	@ 0x42
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	@ 0x40
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2202      	movs	r2, #2
 8002380:	4013      	ands	r3, r2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d1c5      	bne.n	8002312 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239c:	e02f      	b.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 f837 	bl	8002418 <I2C_IsErrorOccurred>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e02d      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7fe fbcf 	bl	8000b54 <HAL_GetTick>
 80023b6:	0002      	movs	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11a      	bne.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2220      	movs	r2, #32
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d013      	beq.n	80023fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	2220      	movs	r2, #32
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	2120      	movs	r1, #32
 80023e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2242      	movs	r2, #66	@ 0x42
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2240      	movs	r2, #64	@ 0x40
 80023f6:	2100      	movs	r1, #0
 80023f8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e007      	b.n	800240e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2220      	movs	r2, #32
 8002406:	4013      	ands	r3, r2
 8002408:	2b20      	cmp	r3, #32
 800240a:	d1c8      	bne.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08a      	sub	sp, #40	@ 0x28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2327      	movs	r3, #39	@ 0x27
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2210      	movs	r2, #16
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <I2C_IsErrorOccurred+0x2e>
 8002444:	e079      	b.n	800253a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2210      	movs	r2, #16
 800244c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800244e:	e057      	b.n	8002500 <I2C_IsErrorOccurred+0xe8>
 8002450:	2227      	movs	r2, #39	@ 0x27
 8002452:	18bb      	adds	r3, r7, r2
 8002454:	18ba      	adds	r2, r7, r2
 8002456:	7812      	ldrb	r2, [r2, #0]
 8002458:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	d04f      	beq.n	8002500 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002460:	f7fe fb78 	bl	8000b54 <HAL_GetTick>
 8002464:	0002      	movs	r2, r0
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d302      	bcc.n	8002476 <I2C_IsErrorOccurred+0x5e>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d144      	bne.n	8002500 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002484:	2013      	movs	r0, #19
 8002486:	183b      	adds	r3, r7, r0
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	2142      	movs	r1, #66	@ 0x42
 800248c:	5c52      	ldrb	r2, [r2, r1]
 800248e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	401a      	ands	r2, r3
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d126      	bne.n	80024f2 <I2C_IsErrorOccurred+0xda>
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	01db      	lsls	r3, r3, #7
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d021      	beq.n	80024f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b20      	cmp	r3, #32
 80024b4:	d01d      	beq.n	80024f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2180      	movs	r1, #128	@ 0x80
 80024c2:	01c9      	lsls	r1, r1, #7
 80024c4:	430a      	orrs	r2, r1
 80024c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80024c8:	f7fe fb44 	bl	8000b54 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d0:	e00f      	b.n	80024f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80024d2:	f7fe fb3f 	bl	8000b54 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b19      	cmp	r3, #25
 80024de:	d908      	bls.n	80024f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	2220      	movs	r2, #32
 80024e4:	4313      	orrs	r3, r2
 80024e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024e8:	2327      	movs	r3, #39	@ 0x27
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]

              break;
 80024f0:	e006      	b.n	8002500 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2220      	movs	r2, #32
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b20      	cmp	r3, #32
 80024fe:	d1e8      	bne.n	80024d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2220      	movs	r2, #32
 8002508:	4013      	ands	r3, r2
 800250a:	2b20      	cmp	r3, #32
 800250c:	d004      	beq.n	8002518 <I2C_IsErrorOccurred+0x100>
 800250e:	2327      	movs	r3, #39	@ 0x27
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d09b      	beq.n	8002450 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002518:	2327      	movs	r3, #39	@ 0x27
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2220      	movs	r2, #32
 8002528:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2204      	movs	r2, #4
 800252e:	4313      	orrs	r3, r2
 8002530:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002532:	2327      	movs	r3, #39	@ 0x27
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d00c      	beq.n	8002566 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	2201      	movs	r2, #1
 8002550:	4313      	orrs	r3, r2
 8002552:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	0052      	lsls	r2, r2, #1
 800255c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255e:	2327      	movs	r3, #39	@ 0x27
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4013      	ands	r3, r2
 800256e:	d00c      	beq.n	800258a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2208      	movs	r2, #8
 8002574:	4313      	orrs	r3, r2
 8002576:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	00d2      	lsls	r2, r2, #3
 8002580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002582:	2327      	movs	r3, #39	@ 0x27
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	2380      	movs	r3, #128	@ 0x80
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d00c      	beq.n	80025ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	2202      	movs	r2, #2
 8002598:	4313      	orrs	r3, r2
 800259a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2280      	movs	r2, #128	@ 0x80
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a6:	2327      	movs	r3, #39	@ 0x27
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80025ae:	2327      	movs	r3, #39	@ 0x27
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01d      	beq.n	80025f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f7ff fe09 	bl	80021d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	490e      	ldr	r1, [pc, #56]	@ (8002604 <I2C_IsErrorOccurred+0x1ec>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025d4:	6a3b      	ldr	r3, [r7, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2241      	movs	r2, #65	@ 0x41
 80025e0:	2120      	movs	r1, #32
 80025e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2242      	movs	r2, #66	@ 0x42
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	2100      	movs	r1, #0
 80025f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025f4:	2327      	movs	r3, #39	@ 0x27
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
}
 80025fa:	0018      	movs	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	b00a      	add	sp, #40	@ 0x28
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002608:	b590      	push	{r4, r7, lr}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	0008      	movs	r0, r1
 8002612:	0011      	movs	r1, r2
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	240a      	movs	r4, #10
 8002618:	193b      	adds	r3, r7, r4
 800261a:	1c02      	adds	r2, r0, #0
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	2009      	movs	r0, #9
 8002620:	183b      	adds	r3, r7, r0
 8002622:	1c0a      	adds	r2, r1, #0
 8002624:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002626:	193b      	adds	r3, r7, r4
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	059b      	lsls	r3, r3, #22
 800262c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800262e:	183b      	adds	r3, r7, r0
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	0419      	lsls	r1, r3, #16
 8002634:	23ff      	movs	r3, #255	@ 0xff
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800263a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002642:	4313      	orrs	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002652:	0d51      	lsrs	r1, r2, #21
 8002654:	2280      	movs	r2, #128	@ 0x80
 8002656:	00d2      	lsls	r2, r2, #3
 8002658:	400a      	ands	r2, r1
 800265a:	4907      	ldr	r1, [pc, #28]	@ (8002678 <I2C_TransferConfig+0x70>)
 800265c:	430a      	orrs	r2, r1
 800265e:	43d2      	mvns	r2, r2
 8002660:	401a      	ands	r2, r3
 8002662:	0011      	movs	r1, r2
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	430a      	orrs	r2, r1
 800266c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b007      	add	sp, #28
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	03ff63ff 	.word	0x03ff63ff

0800267c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	000a      	movs	r2, r1
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800268e:	1cbb      	adds	r3, r7, #2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d010      	beq.n	80026ba <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2242      	movs	r2, #66	@ 0x42
 800269c:	4313      	orrs	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2241      	movs	r2, #65	@ 0x41
 80026a4:	5c9b      	ldrb	r3, [r3, r2]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	001a      	movs	r2, r3
 80026aa:	2328      	movs	r3, #40	@ 0x28
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b28      	cmp	r3, #40	@ 0x28
 80026b0:	d003      	beq.n	80026ba <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	22b0      	movs	r2, #176	@ 0xb0
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80026ba:	1cbb      	adds	r3, r7, #2
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	2202      	movs	r2, #2
 80026c0:	4013      	ands	r3, r2
 80026c2:	d010      	beq.n	80026e6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2244      	movs	r2, #68	@ 0x44
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2241      	movs	r2, #65	@ 0x41
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	001a      	movs	r2, r3
 80026d6:	2328      	movs	r3, #40	@ 0x28
 80026d8:	4013      	ands	r3, r2
 80026da:	2b28      	cmp	r3, #40	@ 0x28
 80026dc:	d003      	beq.n	80026e6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	22b0      	movs	r2, #176	@ 0xb0
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026e6:	1cbb      	adds	r3, r7, #2
 80026e8:	2200      	movs	r2, #0
 80026ea:	5e9b      	ldrsh	r3, [r3, r2]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da03      	bge.n	80026f8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22b8      	movs	r2, #184	@ 0xb8
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80026f8:	1cbb      	adds	r3, r7, #2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d103      	bne.n	8002708 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2290      	movs	r2, #144	@ 0x90
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002708:	1cbb      	adds	r3, r7, #2
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	2b20      	cmp	r3, #32
 800270e:	d103      	bne.n	8002718 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002718:	1cbb      	adds	r3, r7, #2
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	2b40      	cmp	r3, #64	@ 0x40
 800271e:	d103      	bne.n	8002728 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2240      	movs	r2, #64	@ 0x40
 8002724:	4313      	orrs	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43d9      	mvns	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	400a      	ands	r2, r1
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2241      	movs	r2, #65	@ 0x41
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b20      	cmp	r3, #32
 8002758:	d138      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002764:	2302      	movs	r3, #2
 8002766:	e032      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2241      	movs	r2, #65	@ 0x41
 8002774:	2124      	movs	r1, #36	@ 0x24
 8002776:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	438a      	bics	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4911      	ldr	r1, [pc, #68]	@ (80027d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002794:	400a      	ands	r2, r1
 8002796:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6819      	ldr	r1, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2241      	movs	r2, #65	@ 0x41
 80027bc:	2120      	movs	r1, #32
 80027be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	@ 0x40
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	0018      	movs	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b002      	add	sp, #8
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	46c0      	nop			@ (mov r8, r8)
 80027d8:	ffffefff 	.word	0xffffefff

080027dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2241      	movs	r2, #65	@ 0x41
 80027ea:	5c9b      	ldrb	r3, [r3, r2]
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d139      	bne.n	8002866 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e033      	b.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	@ 0x40
 8002804:	2101      	movs	r1, #1
 8002806:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2241      	movs	r2, #65	@ 0x41
 800280c:	2124      	movs	r1, #36	@ 0x24
 800280e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	438a      	bics	r2, r1
 800281e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a11      	ldr	r2, [pc, #68]	@ (8002870 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2101      	movs	r1, #1
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	2120      	movs	r1, #32
 8002858:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}
 8002870:	fffff0ff 	.word	0xfffff0ff

08002874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e301      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d100      	bne.n	8002892 <HAL_RCC_OscConfig+0x1e>
 8002890:	e08d      	b.n	80029ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002892:	4bc3      	ldr	r3, [pc, #780]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	220c      	movs	r2, #12
 8002898:	4013      	ands	r3, r2
 800289a:	2b04      	cmp	r3, #4
 800289c:	d00e      	beq.n	80028bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800289e:	4bc0      	ldr	r3, [pc, #768]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	220c      	movs	r2, #12
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x64>
 80028aa:	4bbd      	ldr	r3, [pc, #756]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	025b      	lsls	r3, r3, #9
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	@ 0x80
 80028b6:	025b      	lsls	r3, r3, #9
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4bb8      	ldr	r3, [pc, #736]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	029b      	lsls	r3, r3, #10
 80028c4:	4013      	ands	r3, r2
 80028c6:	d100      	bne.n	80028ca <HAL_RCC_OscConfig+0x56>
 80028c8:	e070      	b.n	80029ac <HAL_RCC_OscConfig+0x138>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d000      	beq.n	80028d4 <HAL_RCC_OscConfig+0x60>
 80028d2:	e06b      	b.n	80029ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e2d8      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x7c>
 80028e0:	4baf      	ldr	r3, [pc, #700]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4bae      	ldr	r3, [pc, #696]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	2180      	movs	r1, #128	@ 0x80
 80028e8:	0249      	lsls	r1, r1, #9
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e02f      	b.n	8002950 <HAL_RCC_OscConfig+0xdc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10c      	bne.n	8002912 <HAL_RCC_OscConfig+0x9e>
 80028f8:	4ba9      	ldr	r3, [pc, #676]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4ba8      	ldr	r3, [pc, #672]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	49a9      	ldr	r1, [pc, #676]	@ (8002ba4 <HAL_RCC_OscConfig+0x330>)
 8002900:	400a      	ands	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4ba6      	ldr	r3, [pc, #664]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4ba5      	ldr	r3, [pc, #660]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800290a:	49a7      	ldr	r1, [pc, #668]	@ (8002ba8 <HAL_RCC_OscConfig+0x334>)
 800290c:	400a      	ands	r2, r1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e01e      	b.n	8002950 <HAL_RCC_OscConfig+0xdc>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d10e      	bne.n	8002938 <HAL_RCC_OscConfig+0xc4>
 800291a:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	02c9      	lsls	r1, r1, #11
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	4b9d      	ldr	r3, [pc, #628]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800292e:	2180      	movs	r1, #128	@ 0x80
 8002930:	0249      	lsls	r1, r1, #9
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xdc>
 8002938:	4b99      	ldr	r3, [pc, #612]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b98      	ldr	r3, [pc, #608]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800293e:	4999      	ldr	r1, [pc, #612]	@ (8002ba4 <HAL_RCC_OscConfig+0x330>)
 8002940:	400a      	ands	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	4b96      	ldr	r3, [pc, #600]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b95      	ldr	r3, [pc, #596]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 800294a:	4997      	ldr	r1, [pc, #604]	@ (8002ba8 <HAL_RCC_OscConfig+0x334>)
 800294c:	400a      	ands	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d014      	beq.n	8002982 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe f8fc 	bl	8000b54 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002962:	f7fe f8f7 	bl	8000b54 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	@ 0x64
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e28a      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002974:	4b8a      	ldr	r3, [pc, #552]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	029b      	lsls	r3, r3, #10
 800297c:	4013      	ands	r3, r2
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0xee>
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe f8e7 	bl	8000b54 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe f8e2 	bl	8000b54 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e275      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b80      	ldr	r3, [pc, #512]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	029b      	lsls	r3, r3, #10
 80029a6:	4013      	ands	r3, r2
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x118>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x146>
 80029b8:	e069      	b.n	8002a8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029ba:	4b79      	ldr	r3, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	220c      	movs	r2, #12
 80029c0:	4013      	ands	r3, r2
 80029c2:	d00b      	beq.n	80029dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029c4:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	220c      	movs	r2, #12
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d11c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x196>
 80029d0:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	4013      	ands	r3, r2
 80029da:	d116      	bne.n	8002a0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029dc:	4b70      	ldr	r3, [pc, #448]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2202      	movs	r2, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e24b      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	22f8      	movs	r2, #248	@ 0xf8
 80029f8:	4393      	bics	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	00da      	lsls	r2, r3, #3
 8002a02:	4b67      	ldr	r3, [pc, #412]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a04:	430a      	orrs	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a08:	e041      	b.n	8002a8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a12:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b62      	ldr	r3, [pc, #392]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f899 	bl	8000b54 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe f894 	bl	8000b54 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e227      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d0f1      	beq.n	8002a28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b56      	ldr	r3, [pc, #344]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	22f8      	movs	r2, #248	@ 0xf8
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	00da      	lsls	r2, r3, #3
 8002a54:	4b52      	ldr	r3, [pc, #328]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e018      	b.n	8002a8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5c:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	438a      	bics	r2, r1
 8002a66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a68:	f7fe f874 	bl	8000b54 <HAL_GetTick>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe f86f 	bl	8000b54 <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e202      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a84:	4b46      	ldr	r3, [pc, #280]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d1f1      	bne.n	8002a72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2208      	movs	r2, #8
 8002a94:	4013      	ands	r3, r2
 8002a96:	d036      	beq.n	8002b06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d019      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7fe f852 	bl	8000b54 <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7fe f84d 	bl	8000b54 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1e0      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac8:	4b35      	ldr	r3, [pc, #212]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	2202      	movs	r2, #2
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d0f1      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x242>
 8002ad2:	e018      	b.n	8002b06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe f838 	bl	8000b54 <HAL_GetTick>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aea:	f7fe f833 	bl	8000b54 <HAL_GetTick>
 8002aee:	0002      	movs	r2, r0
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1c6      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2202      	movs	r2, #2
 8002b02:	4013      	ands	r3, r2
 8002b04:	d1f1      	bne.n	8002aea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x29e>
 8002b10:	e0b4      	b.n	8002c7c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	201f      	movs	r0, #31
 8002b14:	183b      	adds	r3, r7, r0
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	055b      	lsls	r3, r3, #21
 8002b22:	4013      	ands	r3, r2
 8002b24:	d110      	bne.n	8002b48 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b28:	69da      	ldr	r2, [r3, #28]
 8002b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b2c:	2180      	movs	r1, #128	@ 0x80
 8002b2e:	0549      	lsls	r1, r1, #21
 8002b30:	430a      	orrs	r2, r1
 8002b32:	61da      	str	r2, [r3, #28]
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	2380      	movs	r3, #128	@ 0x80
 8002b3a:	055b      	lsls	r3, r3, #21
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b18      	ldr	r3, [pc, #96]	@ (8002bac <HAL_RCC_OscConfig+0x338>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d11a      	bne.n	8002b8a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b54:	4b15      	ldr	r3, [pc, #84]	@ (8002bac <HAL_RCC_OscConfig+0x338>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <HAL_RCC_OscConfig+0x338>)
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	0049      	lsls	r1, r1, #1
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b62:	f7fd fff7 	bl	8000b54 <HAL_GetTick>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fd fff2 	bl	8000b54 <HAL_GetTick>
 8002b70:	0002      	movs	r2, r0
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	@ 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e185      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002bac <HAL_RCC_OscConfig+0x338>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10e      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x33c>
 8002b92:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	4b02      	ldr	r3, [pc, #8]	@ (8002ba0 <HAL_RCC_OscConfig+0x32c>)
 8002b98:	2101      	movs	r1, #1
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	621a      	str	r2, [r3, #32]
 8002b9e:	e035      	b.n	8002c0c <HAL_RCC_OscConfig+0x398>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	fffeffff 	.word	0xfffeffff
 8002ba8:	fffbffff 	.word	0xfffbffff
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x35e>
 8002bb8:	4bb6      	ldr	r3, [pc, #728]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	4bb5      	ldr	r3, [pc, #724]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	621a      	str	r2, [r3, #32]
 8002bc4:	4bb3      	ldr	r3, [pc, #716]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bc6:	6a1a      	ldr	r2, [r3, #32]
 8002bc8:	4bb2      	ldr	r3, [pc, #712]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bca:	2104      	movs	r1, #4
 8002bcc:	438a      	bics	r2, r1
 8002bce:	621a      	str	r2, [r3, #32]
 8002bd0:	e01c      	b.n	8002c0c <HAL_RCC_OscConfig+0x398>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x380>
 8002bda:	4bae      	ldr	r3, [pc, #696]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	4bad      	ldr	r3, [pc, #692]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002be0:	2104      	movs	r1, #4
 8002be2:	430a      	orrs	r2, r1
 8002be4:	621a      	str	r2, [r3, #32]
 8002be6:	4bab      	ldr	r3, [pc, #684]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	4baa      	ldr	r3, [pc, #680]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	621a      	str	r2, [r3, #32]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0x398>
 8002bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	4ba6      	ldr	r3, [pc, #664]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	438a      	bics	r2, r1
 8002bfe:	621a      	str	r2, [r3, #32]
 8002c00:	4ba4      	ldr	r3, [pc, #656]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	4ba3      	ldr	r3, [pc, #652]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c06:	2104      	movs	r1, #4
 8002c08:	438a      	bics	r2, r1
 8002c0a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d014      	beq.n	8002c3e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fd ff9e 	bl	8000b54 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1e:	f7fd ff99 	bl	8000b54 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a9b      	ldr	r2, [pc, #620]	@ (8002e98 <HAL_RCC_OscConfig+0x624>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e12b      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b98      	ldr	r3, [pc, #608]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3aa>
 8002c3c:	e013      	b.n	8002c66 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fd ff89 	bl	8000b54 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c46:	e009      	b.n	8002c5c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c48:	f7fd ff84 	bl	8000b54 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	4a91      	ldr	r2, [pc, #580]	@ (8002e98 <HAL_RCC_OscConfig+0x624>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e116      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c66:	231f      	movs	r3, #31
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	4b87      	ldr	r3, [pc, #540]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c76:	4989      	ldr	r1, [pc, #548]	@ (8002e9c <HAL_RCC_OscConfig+0x628>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	4013      	ands	r3, r2
 8002c84:	d063      	beq.n	8002d4e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d12a      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c8e:	4b81      	ldr	r3, [pc, #516]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c92:	4b80      	ldr	r3, [pc, #512]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c94:	2104      	movs	r1, #4
 8002c96:	430a      	orrs	r2, r1
 8002c98:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c9a:	4b7e      	ldr	r3, [pc, #504]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fd ff55 	bl	8000b54 <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cb0:	f7fd ff50 	bl	8000b54 <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0e3      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cc2:	4b74      	ldr	r3, [pc, #464]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d0f1      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ccc:	4b71      	ldr	r3, [pc, #452]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd0:	22f8      	movs	r2, #248	@ 0xf8
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	00da      	lsls	r2, r3, #3
 8002cdc:	4b6d      	ldr	r3, [pc, #436]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ce2:	e034      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	3305      	adds	r3, #5
 8002cea:	d111      	bne.n	8002d10 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cec:	4b69      	ldr	r3, [pc, #420]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf0:	4b68      	ldr	r3, [pc, #416]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cf8:	4b66      	ldr	r3, [pc, #408]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfc:	22f8      	movs	r2, #248	@ 0xf8
 8002cfe:	4393      	bics	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	00da      	lsls	r2, r3, #3
 8002d08:	4b62      	ldr	r3, [pc, #392]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d0e:	e01e      	b.n	8002d4e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d10:	4b60      	ldr	r3, [pc, #384]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d14:	4b5f      	ldr	r3, [pc, #380]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d16:	2104      	movs	r1, #4
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d1c:	4b5d      	ldr	r3, [pc, #372]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d20:	4b5c      	ldr	r3, [pc, #368]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fd ff14 	bl	8000b54 <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d32:	f7fd ff0f 	bl	8000b54 <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0a2      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d44:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d1f1      	bne.n	8002d32 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d100      	bne.n	8002d58 <HAL_RCC_OscConfig+0x4e4>
 8002d56:	e097      	b.n	8002e88 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d58:	4b4e      	ldr	r3, [pc, #312]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	220c      	movs	r2, #12
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d100      	bne.n	8002d66 <HAL_RCC_OscConfig+0x4f2>
 8002d64:	e06b      	b.n	8002e3e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d14c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6e:	4b49      	ldr	r3, [pc, #292]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d74:	494a      	ldr	r1, [pc, #296]	@ (8002ea0 <HAL_RCC_OscConfig+0x62c>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fd feeb 	bl	8000b54 <HAL_GetTick>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d84:	f7fd fee6 	bl	8000b54 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e079      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d96:	4b3f      	ldr	r3, [pc, #252]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	2380      	movs	r3, #128	@ 0x80
 8002d9c:	049b      	lsls	r3, r3, #18
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da2:	4b3c      	ldr	r3, [pc, #240]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	220f      	movs	r2, #15
 8002da8:	4393      	bics	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db0:	4b38      	ldr	r3, [pc, #224]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002db2:	430a      	orrs	r2, r1
 8002db4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002db6:	4b37      	ldr	r3, [pc, #220]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea4 <HAL_RCC_OscConfig+0x630>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	4b32      	ldr	r3, [pc, #200]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	4b30      	ldr	r3, [pc, #192]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	0449      	lsls	r1, r1, #17
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fd feb9 	bl	8000b54 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fd feb4 	bl	8000b54 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e047      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	049b      	lsls	r3, r3, #18
 8002e02:	4013      	ands	r3, r2
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0x574>
 8002e06:	e03f      	b.n	8002e88 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e08:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002e0e:	4924      	ldr	r1, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x62c>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fd fe9e 	bl	8000b54 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fd fe99 	bl	8000b54 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e02c      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	4b18      	ldr	r3, [pc, #96]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	049b      	lsls	r3, r3, #18
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x5aa>
 8002e3c:	e024      	b.n	8002e88 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e01f      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e50:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <HAL_RCC_OscConfig+0x620>)
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	025b      	lsls	r3, r3, #9
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d10e      	bne.n	8002e84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	220f      	movs	r2, #15
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d107      	bne.n	8002e84 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	23f0      	movs	r3, #240	@ 0xf0
 8002e78:	039b      	lsls	r3, r3, #14
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b008      	add	sp, #32
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00001388 	.word	0x00001388
 8002e9c:	efffffff 	.word	0xefffffff
 8002ea0:	feffffff 	.word	0xfeffffff
 8002ea4:	ffc2ffff 	.word	0xffc2ffff

08002ea8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b3      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d911      	bls.n	8002eee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b58      	ldr	r3, [pc, #352]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	4393      	bics	r3, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	4b55      	ldr	r3, [pc, #340]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d001      	beq.n	8002eee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e09a      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	d006      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4b4a      	ldr	r3, [pc, #296]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f08:	21e0      	movs	r1, #224	@ 0xe0
 8002f0a:	00c9      	lsls	r1, r1, #3
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	22f0      	movs	r2, #240	@ 0xf0
 8002f16:	4393      	bics	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b44      	ldr	r3, [pc, #272]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d040      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b3e      	ldr	r3, [pc, #248]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	029b      	lsls	r3, r3, #10
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d114      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e06e      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d108      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e062      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b34      	ldr	r3, [pc, #208]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2202      	movs	r2, #2
 8002f64:	4013      	ands	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e05b      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	4393      	bics	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fd fde8 	bl	8000b54 <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f88:	e009      	b.n	8002f9e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f8a:	f7fd fde3 	bl	8000b54 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	4a27      	ldr	r2, [pc, #156]	@ (8003034 <HAL_RCC_ClockConfig+0x18c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e042      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	220c      	movs	r2, #12
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1ec      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d211      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4393      	bics	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	4b18      	ldr	r3, [pc, #96]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd0:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_RCC_ClockConfig+0x184>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_RCC_ClockConfig+0x190>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003000:	f000 f820 	bl	8003044 <HAL_RCC_GetSysClockFreq>
 8003004:	0001      	movs	r1, r0
 8003006:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <HAL_RCC_ClockConfig+0x188>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	220f      	movs	r2, #15
 800300e:	4013      	ands	r3, r2
 8003010:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_RCC_ClockConfig+0x194>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	000a      	movs	r2, r1
 8003016:	40da      	lsrs	r2, r3
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_ClockConfig+0x198>)
 800301a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800301c:	2003      	movs	r0, #3
 800301e:	f7fd fd53 	bl	8000ac8 <HAL_InitTick>
  
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40022000 	.word	0x40022000
 8003030:	40021000 	.word	0x40021000
 8003034:	00001388 	.word	0x00001388
 8003038:	fffff8ff 	.word	0xfffff8ff
 800303c:	08003310 	.word	0x08003310
 8003040:	2000002c 	.word	0x2000002c

08003044 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800305e:	4b20      	ldr	r3, [pc, #128]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	220c      	movs	r2, #12
 8003068:	4013      	ands	r3, r2
 800306a:	2b04      	cmp	r3, #4
 800306c:	d002      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0x30>
 800306e:	2b08      	cmp	r3, #8
 8003070:	d003      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x36>
 8003072:	e02c      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003076:	613b      	str	r3, [r7, #16]
      break;
 8003078:	e02c      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0c9b      	lsrs	r3, r3, #18
 800307e:	220f      	movs	r2, #15
 8003080:	4013      	ands	r3, r2
 8003082:	4a19      	ldr	r2, [pc, #100]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003088:	4b15      	ldr	r3, [pc, #84]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	220f      	movs	r2, #15
 800308e:	4013      	ands	r3, r2
 8003090:	4a16      	ldr	r2, [pc, #88]	@ (80030ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8003092:	5cd3      	ldrb	r3, [r2, r3]
 8003094:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	025b      	lsls	r3, r3, #9
 800309c:	4013      	ands	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	4810      	ldr	r0, [pc, #64]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030a4:	f7fd f830 	bl	8000108 <__udivsi3>
 80030a8:	0003      	movs	r3, r0
 80030aa:	001a      	movs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4353      	muls	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e009      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	000a      	movs	r2, r1
 80030b8:	0152      	lsls	r2, r2, #5
 80030ba:	1a52      	subs	r2, r2, r1
 80030bc:	0193      	lsls	r3, r2, #6
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	185b      	adds	r3, r3, r1
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
      break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030ce:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030d0:	613b      	str	r3, [r7, #16]
      break;
 80030d2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030d4:	693b      	ldr	r3, [r7, #16]
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b006      	add	sp, #24
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			@ (mov r8, r8)
 80030e0:	40021000 	.word	0x40021000
 80030e4:	007a1200 	.word	0x007a1200
 80030e8:	08003320 	.word	0x08003320
 80030ec:	08003330 	.word	0x08003330

080030f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	025b      	lsls	r3, r3, #9
 8003108:	4013      	ands	r3, r2
 800310a:	d100      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800310c:	e08e      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800310e:	2017      	movs	r0, #23
 8003110:	183b      	adds	r3, r7, r0
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b57      	ldr	r3, [pc, #348]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	055b      	lsls	r3, r3, #21
 800311e:	4013      	ands	r3, r2
 8003120:	d110      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b54      	ldr	r3, [pc, #336]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003124:	69da      	ldr	r2, [r3, #28]
 8003126:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003128:	2180      	movs	r1, #128	@ 0x80
 800312a:	0549      	lsls	r1, r1, #21
 800312c:	430a      	orrs	r2, r1
 800312e:	61da      	str	r2, [r3, #28]
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	2380      	movs	r3, #128	@ 0x80
 8003136:	055b      	lsls	r3, r3, #21
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	183b      	adds	r3, r7, r0
 8003140:	2201      	movs	r2, #1
 8003142:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b4c      	ldr	r3, [pc, #304]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	2380      	movs	r3, #128	@ 0x80
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d11a      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003150:	4b49      	ldr	r3, [pc, #292]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b48      	ldr	r3, [pc, #288]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003156:	2180      	movs	r1, #128	@ 0x80
 8003158:	0049      	lsls	r1, r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315e:	f7fd fcf9 	bl	8000b54 <HAL_GetTick>
 8003162:	0003      	movs	r3, r0
 8003164:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	e008      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7fd fcf4 	bl	8000b54 <HAL_GetTick>
 800316c:	0002      	movs	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e077      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b3f      	ldr	r3, [pc, #252]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	2380      	movs	r3, #128	@ 0x80
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4013      	ands	r3, r2
 8003184:	d0f0      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	23c0      	movs	r3, #192	@ 0xc0
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4013      	ands	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d034      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	23c0      	movs	r3, #192	@ 0xc0
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d02c      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a8:	4b32      	ldr	r3, [pc, #200]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a33      	ldr	r2, [pc, #204]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031b2:	4b30      	ldr	r3, [pc, #192]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	0249      	lsls	r1, r1, #9
 80031bc:	430a      	orrs	r2, r1
 80031be:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031c2:	6a1a      	ldr	r2, [r3, #32]
 80031c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031c6:	492e      	ldr	r1, [pc, #184]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80031c8:	400a      	ands	r2, r1
 80031ca:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80031cc:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031da:	f7fd fcbb 	bl	8000b54 <HAL_GetTick>
 80031de:	0003      	movs	r3, r0
 80031e0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e2:	e009      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e4:	f7fd fcb6 	bl	8000b54 <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	4a25      	ldr	r2, [pc, #148]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e038      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	2202      	movs	r2, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003202:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a1d      	ldr	r2, [pc, #116]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003208:	4013      	ands	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4b18      	ldr	r3, [pc, #96]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003212:	430a      	orrs	r2, r1
 8003214:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003216:	2317      	movs	r3, #23
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003220:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003222:	69da      	ldr	r2, [r3, #28]
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003226:	4918      	ldr	r1, [pc, #96]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003228:	400a      	ands	r2, r1
 800322a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003236:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	2203      	movs	r2, #3
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003246:	430a      	orrs	r2, r1
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2220      	movs	r2, #32
 8003250:	4013      	ands	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003254:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	2210      	movs	r2, #16
 800325a:	4393      	bics	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003264:	430a      	orrs	r2, r1
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b006      	add	sp, #24
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
 800327c:	fffffcff 	.word	0xfffffcff
 8003280:	fffeffff 	.word	0xfffeffff
 8003284:	00001388 	.word	0x00001388
 8003288:	efffffff 	.word	0xefffffff

0800328c <memset>:
 800328c:	0003      	movs	r3, r0
 800328e:	1882      	adds	r2, r0, r2
 8003290:	4293      	cmp	r3, r2
 8003292:	d100      	bne.n	8003296 <memset+0xa>
 8003294:	4770      	bx	lr
 8003296:	7019      	strb	r1, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	e7f9      	b.n	8003290 <memset+0x4>

0800329c <__libc_init_array>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	2600      	movs	r6, #0
 80032a0:	4c0c      	ldr	r4, [pc, #48]	@ (80032d4 <__libc_init_array+0x38>)
 80032a2:	4d0d      	ldr	r5, [pc, #52]	@ (80032d8 <__libc_init_array+0x3c>)
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	42a6      	cmp	r6, r4
 80032aa:	d109      	bne.n	80032c0 <__libc_init_array+0x24>
 80032ac:	2600      	movs	r6, #0
 80032ae:	f000 f823 	bl	80032f8 <_init>
 80032b2:	4c0a      	ldr	r4, [pc, #40]	@ (80032dc <__libc_init_array+0x40>)
 80032b4:	4d0a      	ldr	r5, [pc, #40]	@ (80032e0 <__libc_init_array+0x44>)
 80032b6:	1b64      	subs	r4, r4, r5
 80032b8:	10a4      	asrs	r4, r4, #2
 80032ba:	42a6      	cmp	r6, r4
 80032bc:	d105      	bne.n	80032ca <__libc_init_array+0x2e>
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	00b3      	lsls	r3, r6, #2
 80032c2:	58eb      	ldr	r3, [r5, r3]
 80032c4:	4798      	blx	r3
 80032c6:	3601      	adds	r6, #1
 80032c8:	e7ee      	b.n	80032a8 <__libc_init_array+0xc>
 80032ca:	00b3      	lsls	r3, r6, #2
 80032cc:	58eb      	ldr	r3, [r5, r3]
 80032ce:	4798      	blx	r3
 80032d0:	3601      	adds	r6, #1
 80032d2:	e7f2      	b.n	80032ba <__libc_init_array+0x1e>
 80032d4:	08003340 	.word	0x08003340
 80032d8:	08003340 	.word	0x08003340
 80032dc:	08003344 	.word	0x08003344
 80032e0:	08003340 	.word	0x08003340

080032e4 <memcpy>:
 80032e4:	2300      	movs	r3, #0
 80032e6:	b510      	push	{r4, lr}
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d100      	bne.n	80032ee <memcpy+0xa>
 80032ec:	bd10      	pop	{r4, pc}
 80032ee:	5ccc      	ldrb	r4, [r1, r3]
 80032f0:	54c4      	strb	r4, [r0, r3]
 80032f2:	3301      	adds	r3, #1
 80032f4:	e7f8      	b.n	80032e8 <memcpy+0x4>
	...

080032f8 <_init>:
 80032f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032fe:	bc08      	pop	{r3}
 8003300:	469e      	mov	lr, r3
 8003302:	4770      	bx	lr

08003304 <_fini>:
 8003304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330a:	bc08      	pop	{r3}
 800330c:	469e      	mov	lr, r3
 800330e:	4770      	bx	lr
